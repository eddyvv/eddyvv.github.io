<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>链路聚合</title>
    <link href="/2023/06/26/%E9%93%BE%E8%B7%AF%E8%81%9A%E5%90%88/"/>
    <url>/2023/06/26/%E9%93%BE%E8%B7%AF%E8%81%9A%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h1 id="链路聚合"><a href="#链路聚合" class="headerlink" title="链路聚合"></a>链路聚合</h1><h2 id="什么是链路聚合？为什么要进行链路聚合？"><a href="#什么是链路聚合？为什么要进行链路聚合？" class="headerlink" title="什么是链路聚合？为什么要进行链路聚合？"></a>什么是链路聚合？为什么要进行链路聚合？</h2><p>链路聚合是一种网络技术，它将多个物理链路（如以太网、无线电连接或其他类型的连接）捆绑在一起形成一个逻辑链路，从而增加网络带宽和容错性。</p><p>在链路聚合中，多个物理链路被组合成一个逻辑链路，这个逻辑链路对于网络上的设备来说就像是一个单一的高带宽链路。这种技术可以帮助提高网络的吞吐量和可靠性，因为当一个物理链路出现故障时，其他链路可以继续正常工作，从而避免因单点故障而导致整个网络瘫痪。</p><p>链路聚合还可以使网络管理更加简单，因为网络管理员只需要管理一个逻辑链路，而不是多个物理链路。此外，链路聚合可以提高网络的负载均衡能力，因为它可以将网络流量分散到多个物理链路上，从而减轻单个链路的负载压力。</p><h2 id="Linux网卡bonding的7种模式"><a href="#Linux网卡bonding的7种模式" class="headerlink" title="Linux网卡bonding的7种模式"></a>Linux网卡bonding的7种模式</h2><p>bonding是linux内核自带的模块，它能将Linux系统的多个网卡绑定为一个逻辑端口，同时对外提供一个统一的IP地址，目前bonding模块的工作模式共有七种mode(0~6)。</p><h3 id="模式一：balance-rr-轮询均衡模式"><a href="#模式一：balance-rr-轮询均衡模式" class="headerlink" title="模式一：balance-rr 轮询均衡模式"></a>模式一：balance-rr 轮询均衡模式</h3><p>mode&#x3D;0 ，(balance-rr) Round-robin policy 轮询均衡模式</p><ul><li><p>所有链路处于负载均衡状态，轮循环方式（即依次传输：第1个包走eth0，下一个包就走eth1….一直循环下去，直到最后一个传输完毕）往每条链路发送报文，基于per packet方式发送。服务上ping 一个相同地址：1.1.1.1 双网卡的两个网卡都有流量发出。负载到两条链路上，说明是基于per packet方式 ，进行轮询发送。</p></li><li><p>这模式的特点是提供负载平衡（增加了带宽），同时支持容错能力，当有链路出问题，会把流量切换到正常的链路上。</p></li></ul><h3 id="模式二：active-backup-主备策略模式"><a href="#模式二：active-backup-主备策略模式" class="headerlink" title="模式二：active-backup 主备策略模式"></a>模式二：active-backup 主备策略模式</h3><p>mode&#x3D;1， (active-backup) Active-backup policy（主备策略模式）</p><ul><li>只有一个设备处于活动状态，当一个宕掉另一个马上由备份转换为主设备。mac地址是外部可见得，从外面看来，bond的MAC地址是唯一的，以避免switch(交换机)发生混乱。此模式只提供了容错能力；但是它的资源利用率较低，只有一个接口处于工作状态，资源利用率为1&#x2F;n。</li><li>这种模式接入不需要交换机端支持，随便怎么接入都行。</li></ul><h3 id="模式三：balance-xor-平衡策略"><a href="#模式三：balance-xor-平衡策略" class="headerlink" title="模式三：balance-xor 平衡策略"></a>模式三：balance-xor 平衡策略</h3><p>mode&#x3D;2,（balance-xor） XOR policy（根据hash的平衡策略）</p><ul><li>该模式将限定流量，以保证到达特定对端的流量总是从同一个接口上发出。既然目的地是通过MAC地址来决定的，因此该模式在“本地”网络配置下可以工作得很好。如果所有流量是通过单个路由器（比如 “网关”型网络配置，只有一个网关时，源和目标mac都固定了，那么这个算法算出的线路就一直是同一条，那么这种模式就没有多少意义了。），那该模式就不是最好的选择。和balance-rr一样，交换机端口需要能配置为“port channel”。这模式是通过源和目标mac做hash因子来做xor算法来选路的。此模式提供负载平衡和容错能力。</li><li>基于指定的传输HASH策略传输数据包。默认hash算法是： [(source MAC address XOR’d with destination MAC address) modulo slave count]。（XOR：异或），算法可以更改。</li></ul><h3 id="模式四：broadcast-广播策略"><a href="#模式四：broadcast-广播策略" class="headerlink" title="模式四：broadcast 广播策略"></a>模式四：broadcast 广播策略</h3><p>mode&#x3D;3，（broadcast）broadcast policy（广播策略）</p><ul><li>这种模式的特点是在每个slave接口上传输每个数据包，当有对端交换机失效，我们感觉不到任何downtime，但此法过于浪费资源;但是这种模式有很好的容错机制，适用于金融行业，因为他们需要高可靠性的网络，不允许出现任何问题。</li></ul><h3 id="模式五：802-3ad"><a href="#模式五：802-3ad" class="headerlink" title="模式五：802.3ad"></a>模式五：802.3ad</h3><p>mode&#x3D;4，（802.3ad）IEEE 802.3ad Dynamic link aggregation（IEEE 802.3ad 动态链接聚合）</p><ul><li>创建一个聚合组，它们共享同样的速率和双工设定。根据802.3ad规范将多个slave工作在同一个激活的聚合体下。外出流量的slave选择是基于传输hash策略，该策略可以通过<code>xmit_hash_policy</code>选项从缺省的XOR策略改变到其他策略。需要注意的 是，并不是所有的传输策略都是802.3ad适应的，尤其考虑到在802.3ad标准43.2.4章节提及的包乱序问题。不同的实现可能会有不同的适应性。</li><li>必要条件：<ul><li>条件1：ethtool支持获取每个slave的速率和双工设定</li><li>条件2：switch(交换机)支持IEEE802.3ad Dynamic link aggregation</li><li>条件3：大多数switch(交换机)需要经过特定配置才能支持802.3ad模式</li></ul></li></ul><h3 id="模式六：balance-tlb-适配器传输负载均衡"><a href="#模式六：balance-tlb-适配器传输负载均衡" class="headerlink" title="模式六：balance-tlb 适配器传输负载均衡"></a>模式六：balance-tlb 适配器传输负载均衡</h3><p>mode&#x3D;5，（balance-tlb）Adaptive transmit load balancing（适配器传输负载均衡）</p><ul><li>不需要任何特别的switch(交换机)支持的通道bonding。在每个slave上根据当前的负载（根据速度计算）分配外出流量。如果正在接受数据的slave出故障了，另一个slave接管失败的slave的MAC地址。</li><li>该模式的必要条件：ethtool支持获取每个slave的速率，mode6模式下无需配置交换机，因为做bonding的这两块网卡是使用不同的MAC地址。</li></ul><h3 id="模式七：balance-alb-适配器适应性负载均衡"><a href="#模式七：balance-alb-适配器适应性负载均衡" class="headerlink" title="模式七：balance-alb 适配器适应性负载均衡"></a>模式七：balance-alb 适配器适应性负载均衡</h3><p>mode&#x3D;6，（balance-alb）Adaptive load balancing（适配器适应性负载均衡）</p><ul><li><p>该模式包含了balance-tlb模式，同时加上针对IPV4流量的接收负载均衡（receiveload balance, rlb），而且不需要任何switch(交换机)的支持。交换机上也是可见多个网卡的MAC，不需要做链路聚合配置。</p></li><li><p>必要条件：</p><ul><li>条件1：ethtool支持获取每个slave的速率；</li><li>条件2：底层驱动支持设置某个设备的硬件地址，从而使得总是有个slave(curr_active_slave)使用bond的硬件地址，同时保证每个 bond 中的slave都有一个唯一的硬件地址。</li></ul></li></ul><h2 id="Linux配置Bonding模式"><a href="#Linux配置Bonding模式" class="headerlink" title="Linux配置Bonding模式"></a>Linux配置Bonding模式</h2><p><code>/etc/netplan/bond-config.yaml</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">network:<br>  version: 2<br>  ethernets:<br>    ens4f0np0:<br>      addresses: []<br>      dhcp4: no<br>      optional: <span class="hljs-literal">true</span><br>    ens4f1np1:<br>      addresses: []<br>      dhcp4: no<br>      optional: <span class="hljs-literal">true</span><br>  bonds:<br>    bond0:<br>      interfaces:<br>        - ens4f0np0<br>        - ens4f1np1<br>      parameters:<br>        mode: 802.3ad<br>        mii-monitor-interval: 100<br>      addresses:<br>        - <span class="hljs-string">&quot;192.168.12.5/24&quot;</span><br>      gateway4: <span class="hljs-string">&quot;192.168.12.1&quot;</span><br></code></pre></td></tr></table></figure><h2 id="交换机链路聚合（Link-Aggregation，LA）"><a href="#交换机链路聚合（Link-Aggregation，LA）" class="headerlink" title="交换机链路聚合（Link Aggregation，LA）"></a>交换机链路聚合（Link Aggregation，LA）</h2><h3 id="Link-Aggregation"><a href="#Link-Aggregation" class="headerlink" title="Link Aggregation"></a><strong>Link Aggregation</strong></h3><p>不同厂商的交换机在端口聚合（Port Aggregation，PA）方面使用不同的术语。例如，Cisco使用EtherChannel，Brocade使用Brocade LAG，而IEEE 802.3ad LACP（Link Aggregation Control Protocol）则是一种基于标准的协议，它在2008年被转入IEEE 802.1ax标准中。LACP可以动态配置端口聚合，而且不依赖于任何特定的厂商，因此大多数以太网交换机都支持该协议。这些实现的目标都是一致的，即将两个或多个端口绑定在一起，作为一个高带宽的逻辑端口，以提高链路速度、冗余性、弹性和负载均衡性。</p><p>从技术上来说，我们可以在交换机之间使用多个端口创建并行的trunk链路，但生成树协议（STP）会将其视为环路，并关闭所有可能造成环路的链接。而端口聚合则生成一个单一的逻辑链路，不会导致环路问题，并可以作为Access Port（连接主机）或Trunk Port（承载多个VLAN流量）使用。</p><h3 id="Link-Aggregation-Control-Protocol-LACP"><a href="#Link-Aggregation-Control-Protocol-LACP" class="headerlink" title="Link Aggregation Control Protocol (LACP)"></a><strong>Link Aggregation Control Protocol (LACP)</strong></h3><p>LACP 是通过向所有启用LACP协议的链路发送LACPDU Frame来工作的，如果发现链路另一端的设备也启用了LACP，LACP将独自在同一条链路上发送Frame，使得两者能够发现它们之间的多条链路，并将它们合并成单条逻辑链路。</p><p>LACP的模式分为静态和动态，动态又分为主动和被动。</p><h4 id="静态"><a href="#静态" class="headerlink" title="静态"></a>静态</h4><p>mode on，手动强制模式：</p><p>不发送也不接收LACP协商报文，交换机物理端口被强制捆绑到etherchannel，数据包根据聚合口负载均衡模式在多个物理口上传输。一般默认的为基于包的负载均衡，即在多个网口之间轮询发送数据包。使用这种聚合模式时，对端也必须是mode on，强制形成etherchannel。</p><h4 id="动态"><a href="#动态" class="headerlink" title="动态"></a>动态</h4><ul><li>active，主动协商模式：</li></ul><p>交换机聚合口主动发出LACPDU报文，与对端符合802.3ad规范的动态聚合口主动协商。</p><p>一般推荐使用主动模式。</p><ul><li>passive，被动协商模式：</li></ul><p>交换机聚合口只接收LACPDU报文，被动与对端符合802.3ad规范的动态聚合口进行协商。</p><h2 id="Linux网卡bonding与交换机配置关系"><a href="#Linux网卡bonding与交换机配置关系" class="headerlink" title="Linux网卡bonding与交换机配置关系"></a>Linux网卡bonding与交换机配置关系</h2><table><thead><tr><th>bonding模式</th><th>交换机配置</th></tr></thead><tbody><tr><td>mode&#x3D;0，balance-rr 轮询均衡模式</td><td>LACP mode on 强行链路聚合</td></tr><tr><td>mode&#x3D;1，active-backup 主备模式</td><td>无特殊配置</td></tr><tr><td>mode&#x3D;2，balance&#x3D;xor，hash均衡模式</td><td>LACP mode on 强行链路聚合</td></tr><tr><td>mode&#x3D;3，broadcast 广播模式</td><td>LACP mode on 强行链路聚合</td></tr><tr><td>mode&#x3D;4，ieee802.3ad 动态链路聚合</td><td>LACP动态协商，建议主动模式</td></tr><tr><td>mode&#x3D;5，balance-tlb 适配器发送负载均衡</td><td>无特殊配置</td></tr><tr><td>mode&#x3D;6，balance-alb 适配器收发负载均衡</td><td>无特殊配置</td></tr></tbody></table><h2 id="Mellanox交换机配置链路聚合"><a href="#Mellanox交换机配置链路聚合" class="headerlink" title="Mellanox交换机配置链路聚合"></a>Mellanox交换机配置链路聚合</h2><p><img src="/image/%E9%93%BE%E8%B7%AF%E8%81%9A%E5%90%88/image-20230627190550381.png" alt="image-20230627190550381"></p><center>链路聚合连接示意图</center><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#登陆</span><br><span class="hljs-built_in">enable</span><br>config t<br><br>interface port-channel 1<br><span class="hljs-built_in">exit</span><br>lacp<br><br>interface ethernet 1/8<br>channel-group 1 mode active<br><span class="hljs-built_in">exit</span><br><br>interface ethernet 1/7<br>channel-group 1 mode active<br><span class="hljs-built_in">exit</span><br><br>interface port-channel 2<br><span class="hljs-built_in">exit</span><br>lacp<br><br>interface ethernet 1/1<br>channel-group 2 mode active<br><span class="hljs-built_in">exit</span><br>interface ethernet 1/2<br>channel-group 2 mode active<br></code></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://docs.nvidia.com/networking/pages/viewpage.action?pageId=19812499">Link Aggregation Group (LAG) - Onyx v3.8.2110 - NVIDIA Networking Docs</a> Mellanox交换机链路聚合配置方式。</p><p><a href="https://docs.nvidia.com/networking/m/view-rendered-page.action?abstractPageId=19812159">BlueField Link Aggregation - NVIDIA Networking Docs — BlueField Link Aggregation - NVIDIA Networking Docs</a> Mellanox网卡链路聚合配置方式。</p><p><a href="https://enterprise-support.nvidia.com/s/article/howto-configure-lacp-on-mellanox-switches">HowTo Configure LACP on Mellanox Switches (nvidia.com)</a> Mellanox交换机链路聚合配置示例。</p><p><a href="https://www.cnblogs.com/sammyliu/articles/4894991.html">以太网链路聚合控制协议（LACP）（链路聚合控制协议：将多个端口虚机成一个逻辑端口来提高链路速度， Active&#x2F;Active 模式） - SammyLiu - 博客园 (cnblogs.com)</a></p><p><a href="https://www.cnblogs.com/syuee/p/14604221.html">linux网卡聚合及链路聚合 - 白色的番茄 - 博客园 (cnblogs.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/115163338">交换机链路聚合与Linux的bond模式对照 - 知乎 (zhihu.com)</a></p><p><a href="http://infohpc.com/Labs/shownews.php?id=17">NVIDIA Mellanox 交换机 Onyx 配置 L2 MLAG，基础案例-赛诺信致软件技术（北京）有限公司 (infohpc.com)</a></p><p><a href="https://www.cnblogs.com/sxycloud/p/14840994.html">交换机链路聚合模式说明 - sxy-cloud - 博客园 (cnblogs.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/137959501">交换技术链路聚合配置 - 知乎 (zhihu.com)</a></p><p><a href="https://support.huawei.com/enterprise/zh/knowledge/EKB1001172264">Linux下双网卡绑定七种模式 多网卡的7种bond模式原理- 华为 (huawei.com)</a></p><p><a href="https://blog.csdn.net/qq_43284344/article/details/84309446">linux—高级网络配置：链路聚合_liunx做链路聚合命令_一只胖橘猫的博客-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>链路聚合</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LACP</tag>
      
      <tag>链路聚合</tag>
      
      <tag>LA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LAG vs LACP:有什么区别？</title>
    <link href="/2023/06/26/LAG%20vs%20LACP%EF%BC%9A%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F/"/>
    <url>/2023/06/26/LAG%20vs%20LACP%EF%BC%9A%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="LAG-vs-LACP：有什么区别？"><a href="#LAG-vs-LACP：有什么区别？" class="headerlink" title="LAG vs LACP：有什么区别？"></a><strong>LAG vs LACP：有什么区别？</strong></h1><p>在以太网交换机连接领域，链路聚合是一种在不同网络交换机之间并行组合多个端口的技术。它的功能是经济高效地扩展带宽，并在链路故障时提供冗余。但是，总称“链路聚合”是一个相当宽泛的术语，包含各种概念：链路聚合控制协议，链路聚合组，MLAG，802.3ad，802.1AX等。其中，LAG与LACP的问题使许多人感到困惑。在这里，我们按顺序介绍LAG与LACP，并比较LAG与LACP，以说明它们的关系和差异。</p><p><img src="/image/LAG%20vs%20LACP%EF%BC%9A%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F/LAG-vs-LACP-What-is-the-Difference.jpg" alt="img"></p><h2 id="LAG-vs-LACP：什么是-LAG？"><a href="#LAG-vs-LACP：什么是-LAG？" class="headerlink" title="LAG vs LACP：什么是 LAG？"></a><strong>LAG vs LACP：什么是 LAG？</strong></h2><p><strong>LAG（链路聚合组）</strong>是链路聚合的实际技术或实例。当我们在两个交换机之间并行连接多个端口并将它们配置为 LAG 时，就会形成链路聚合组。因此，LAG在两个交换机之间建立了多个链路，从而扩展了带宽。此外，它还在网络故障和负载平衡流量中提供链路级冗余。即使一条链路发生故障，两台交换机之间的其余链路仍将运行。它们还会接管那些应该通过故障流量遍历的流量，因此数据包不会丢失。</p><h2 id="LAG-vs-LACP：什么是-LACP？"><a href="#LAG-vs-LACP：什么是-LACP？" class="headerlink" title="LAG vs LACP：什么是 LACP？"></a><strong>LAG vs LACP：什么是 LACP？</strong></h2><p><strong>LACP（链路聚合控制协议）</strong>是一种自动设置 LAG 的控制协议。因此，您可以选择在没有 LACP 的情况下构建静态 LAG。或者，您可以选择使用 LACP 设置动态 LAG。简单地说，LACP 不是一个链路聚合实例，而是一个用于定义它的协议。LACP 使 LAG 能够从静态 LAG 传输到动态 LAG，从而允许 LAG 组件网络交换机之间的链路聚合信息交换。信息在链路聚合控制协议数据单元 （LACPDU） 中作为数据包传递。两个交换机上的每个端口都可以通过控制协议配置为主动或被动，以优先传输 LACPDU。</p><h2 id="LAG实施方案"><a href="#LAG实施方案" class="headerlink" title="LAG实施方案"></a>LAG实施方案</h2><p>由于 LACP 只是链路聚合组的协议。我们将省略 LAG 与 LACP 的区别，以 FS.COM 查看 LAG 实施方案。 以两台千兆 PoE 网络交换机和另一台 10GbE 光纤交换机之间的 LAG 为例。只需用一根电缆连接每个千兆 PoE 交换机上的一个端口，我们就可以获得 1GE 带宽。但是，当您双链路、三链路或更高的倍数时，带宽将变为 2GE、3GE 等。</p><p>此外，为了上行链路骨干核心交换机，我们可以使用 4 根带有相应模块的光纤跳线来链接 48 端口千兆 PoE 交换机 10GE SFP+ 端口和 10GbE 光纤交换机。然后，S1600-48T4S 上的上行链路带宽扩展到 40GE。在 48 端口 PoE 交换机上形成两个 LAG。形成 LAG 的链路上限和两个交换机之间的 LAG 数量因供应商和交换机型号而异。</p><p><img src="/image/LAG%20vs%20LACP%EF%BC%9A%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F/LAG-vs-LACP-link-aggregation-implement-scenario-by-fs-PoE-switch-and-fiber-switch.jpg" alt="img"></p><p>图 1：在 FS 48 端口 PoE 交换机和 24 端口 PoE 交换机上并行链接 4 个 1GE 端口以设置 LAG，从而将带宽从 1000Mbps 提高到 4 × 1000Mbps。在此照片中，已在 FS 48 端口 PoE 交换机上实施了两个 LAG。</p><h2 id="LAG-vs-LACP：扩展带宽的链路聚合优势"><a href="#LAG-vs-LACP：扩展带宽的链路聚合优势" class="headerlink" title="LAG vs LACP：扩展带宽的链路聚合优势"></a><strong>LAG vs LACP：扩展带宽的链路聚合优势</strong></h2><p>无论 LAG 是否部署链路聚合控制协议，都不需要昂贵的硬件升级。因此，链路聚合组为带宽扩展提供了经济高效的解决方案。堆叠开关确实是获得更高带宽的高级方法。但是，它仅限于可堆叠交换机，不支持单独放置。购买像10GbE交换机这样的更高速度的交换机也是一种直接有效的解决方案。但对于普通用户来说，这种硬件升级超出了预算。</p><h2 id="LAG-vs-LACP：有什么区别？-1"><a href="#LAG-vs-LACP：有什么区别？-1" class="headerlink" title="LAG vs LACP：有什么区别？"></a><strong>LAG vs LACP：有什么区别？</strong></h2><ul><li><p>链路聚合组是链路聚合的实际实例，而 LACP 是用于自动配置和维护 LAG 的协议。</p></li><li><p>不带链路聚合控制协议的 LAG 是一种静态配置，其中 LAG 中的每对端口都需要分别进行手动配置。但是，启用 LACP 的端口是动态配置，可以在构建 LAG 时自动配置为中继组。</p></li><li><p>当谈论 LAG 与 LACP 时，通常指的是没有 LACP 的静态 LAG 与带有 LACP 的动态 LAG。一般来说，动态LAG配置在自动故障转移和相互动态配置方面比静态LAG配置具有优势。在静态链路聚合中，LAG无法分离配置或布线错误，从而导致不必要的网络故障。</p></li></ul><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>LAG与LACP问题是为了解决它们之间的混淆概念。LAG 是链路聚合的实际实例。LACP 是一种控制协议，用于使 LAG 能够自动配置网络交换机端口、分离链路故障和激活故障转移。因此，LAG 包含静态 LAG 配置和动态 LAG 配置，具体取决于是否使用可选的链路聚合控制协议。总体而言，链路聚合组是一种通过交换机堆叠和其他硬件升级方法扩展带宽的经济高效方法。为了最大限度地减少网络链路故障，在静态 LAG 上启用 LACP 的动态 LAG 配置是一个更好的解决方案。</p><blockquote><p>原文地址：<a href="https://www.fiber-optic-components.com/llag-vs-lacp-relationship-difference.html">LAG vs LACP: What’s the Relationship and Difference?Fiber Optic Components (fiber-optic-components.com)</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>链路聚合</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LAG</tag>
      
      <tag>LACP</tag>
      
      <tag>链路聚合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows Terminal添加至鼠标右键</title>
    <link href="/2023/06/19/Windows%20Terminal%E6%B7%BB%E5%8A%A0%E8%87%B3%E9%BC%A0%E6%A0%87%E5%8F%B3%E9%94%AE/"/>
    <url>/2023/06/19/Windows%20Terminal%E6%B7%BB%E5%8A%A0%E8%87%B3%E9%BC%A0%E6%A0%87%E5%8F%B3%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="Windows-Terminal添加至鼠标右键"><a href="#Windows-Terminal添加至鼠标右键" class="headerlink" title="Windows Terminal添加至鼠标右键"></a>Windows Terminal添加至鼠标右键</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在<code>Microsoft Store</code>中即可下载。</p><p><img src="/image/Windows%20Terminal%E6%B7%BB%E5%8A%A0%E8%87%B3%E9%BC%A0%E6%A0%87%E5%8F%B3%E9%94%AE/image-20230619110413661.png" alt="image-20230619110413661"></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="在鼠标右键打开"><a href="#在鼠标右键打开" class="headerlink" title="在鼠标右键打开"></a>在鼠标右键打开</h3><h4 id="下载Terminal图标"><a href="#下载Terminal图标" class="headerlink" title="下载Terminal图标"></a>下载Terminal图标</h4><p>图标地址:<a href="https://raw.githubusercontent.com/microsoft/terminal/master/res/terminal.ico">https://raw.githubusercontent.com/microsoft/terminal/master/res/terminal.ico</a></p><p>下载后保存在某个文件夹<code>path</code></p><h4 id="添加到鼠标右键"><a href="#添加到鼠标右键" class="headerlink" title="添加到鼠标右键"></a>添加到鼠标右键</h4><h5 id="批处理修改注册表"><a href="#批处理修改注册表" class="headerlink" title="批处理修改注册表"></a>批处理修改注册表</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">@<span class="hljs-built_in">echo</span> off<br>reg.exe add <span class="hljs-string">&quot;HKEY_CLASSES_ROOT\Directory\Background\shell\wt&quot;</span> /f /ve /d <span class="hljs-string">&quot;Windows Terminal here&quot;</span><br>reg.exe add <span class="hljs-string">&quot;HKEY_CLASSES_ROOT\Directory\Background\shell\wt&quot;</span> /f /v <span class="hljs-string">&quot;Icon&quot;</span> /t REG_EXPAND_SZ /d <span class="hljs-string">&quot;path\terminal.ico&quot;</span><br>reg.exe add <span class="hljs-string">&quot;HKEY_CLASSES_ROOT\Directory\Background\shell\wt\command&quot;</span> /f /ve /t REG_EXPAND_SZ /d <span class="hljs-string">&quot;\&quot;%%LOCALAPPDATA%%\Microsoft\WindowsApps\wt.exe\&quot;&quot;</span><br>pause<br></code></pre></td></tr></table></figure><h5 id="手动修改注册表"><a href="#手动修改注册表" class="headerlink" title="手动修改注册表"></a>手动修改注册表</h5><p>按下Win+R快捷键打开运行,然后输入<code>regedit</code>打开<strong>注册表编辑器</strong>,然后在地址栏中输入:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">计算机\HKEY_CLASSES_ROOT\directory\background\shell<br></code></pre></td></tr></table></figure><p><img src="/image/Windows%20Terminal%E6%B7%BB%E5%8A%A0%E8%87%B3%E9%BC%A0%E6%A0%87%E5%8F%B3%E9%94%AE/image-20230619111056009.png" alt="image-20230619111056009"></p><p>新建<strong>项</strong>:<code>wt</code></p><p><strong>点击</strong>wt，<strong>双击</strong>右边的<strong>默认</strong>，在里面输入鼠标右键选项的名称：<code>Windows Terminal here</code></p><p>右键wt，选择新建字符串，名为为<code>Icon</code>，在里面输入下载好的图标的地址：<code>path\terminal.ico</code></p><p>右键wt，选择新建项,输入command</p><p>然后点击command,双击右边的默认,输入Terminal的地址<code>&quot;%%LOCALAPPDATA%%\Microsoft\WindowsApps\wt.exe\&quot;</code>即可。</p><p><img src="/image/Windows%20Terminal%E6%B7%BB%E5%8A%A0%E8%87%B3%E9%BC%A0%E6%A0%87%E5%8F%B3%E9%94%AE/image-20230619111734537.png" alt="image-20230619111734537"></p><h4 id="在当前目录打开"><a href="#在当前目录打开" class="headerlink" title="在当前目录打开"></a>在当前目录打开</h4><h5 id="打开配置文件"><a href="#打开配置文件" class="headerlink" title="打开配置文件"></a>打开配置文件</h5><p>点击Windows Terminal菜单栏上的<strong>下拉箭头</strong>,然后选择Settings:</p><p><img src="/image/Windows%20Terminal%E6%B7%BB%E5%8A%A0%E8%87%B3%E9%BC%A0%E6%A0%87%E5%8F%B3%E9%94%AE/image-20230619110508615.png" alt="image-20230619110508615"></p><p><img src="/image/Windows%20Terminal%E6%B7%BB%E5%8A%A0%E8%87%B3%E9%BC%A0%E6%A0%87%E5%8F%B3%E9%94%AE/image-20230619112038125.png" alt="image-20230619112038125"></p><h5 id="在当前目录打开-1"><a href="#在当前目录打开-1" class="headerlink" title="在当前目录打开"></a>在当前目录打开</h5><p>在默认打开的终端配置中添加<code>&quot;startingDirectory&quot; : &quot;.&quot;,</code>这个配置即可:</p><p><img src="/image/Windows%20Terminal%E6%B7%BB%E5%8A%A0%E8%87%B3%E9%BC%A0%E6%A0%87%E5%8F%B3%E9%94%AE/image-20230619112140525.png" alt="image-20230619112140525"></p>]]></content>
    
    
    <categories>
      
      <category>Windows Terminal</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows Terminal</tag>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编译安装调试Linux内核</title>
    <link href="/2023/06/13/%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E8%B0%83%E8%AF%95Linux%E5%86%85%E6%A0%B8/"/>
    <url>/2023/06/13/%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E8%B0%83%E8%AF%95Linux%E5%86%85%E6%A0%B8/</url>
    
    <content type="html"><![CDATA[<h1 id="编译安装内核"><a href="#编译安装内核" class="headerlink" title="编译安装内核"></a>编译安装内核</h1><h2 id="下载内核"><a href="#下载内核" class="headerlink" title="下载内核"></a>下载内核</h2><p>Linux内核下载<a href="https://www.kernel.org/">The Linux Kernel Archives</a></p><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install gcc g++ libncurses5-dev build-essential kernel-package libssl-dev libc6-dev bin86 flex bison qttools5-dev libelf-dev<br></code></pre></td></tr></table></figure><h2 id="更改-config"><a href="#更改-config" class="headerlink" title="更改.config"></a>更改.config</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#拷贝现有ubuntu的.config至编译内核的目录</span><br><span class="hljs-built_in">cp</span> -v /boot/config-$(<span class="hljs-built_in">uname</span> -r) .config<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make menuconfig<br></code></pre></td></tr></table></figure><ol><li>打开<code>.config</code>更改<code>CONFIG_SYSTEM_TRUSTED_KEYS </code>和<code>CONFIG_SYSTEM_REVOCATION_KEYS</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">CONFIG_SYSTEM_TRUSTED_KEYS=<span class="hljs-string">&#x27;&#x27;</span><br>CONFIG_SYSTEM_EXTRA_CERTIFICATE_SIZE=2048<br>CONFIG_SYSTEM_REVOCATION_KEYS=<span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>更改<code>CONFIG_DEBUG_INFO_BTF</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">CONFIG_DEBUG_INFO_BTF=n<br></code></pre></td></tr></table></figure><ol start="3"><li>注释掉CONFIG_X86_X32</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#CONFIG_X86_X32=y</span><br></code></pre></td></tr></table></figure><h2 id="编译内核"><a href="#编译内核" class="headerlink" title="编译内核"></a>编译内核</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#基于文本选单的配置界面，字符终端下推荐使用</span><br>make menuconfig<br><br>make -j$(<span class="hljs-built_in">nproc</span>)<br><br>make all<br><br><span class="hljs-comment"># 编译模块</span><br>make -j$(<span class="hljs-built_in">nproc</span>) modules<br></code></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="首先安装模块"><a href="#首先安装模块" class="headerlink" title="首先安装模块"></a>首先安装模块</h3><p>这里加上<code>INSTALL_MOD_STRIP=1</code>是为了避免内核启动时卡在 <a href="#ramdisk">loading initial ramdisk</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo make INSTALL_MOD_STRIP=1 modules_install<br></code></pre></td></tr></table></figure><h3 id="安装内核"><a href="#安装内核" class="headerlink" title="安装内核"></a>安装内核</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">make bzImage<br>sudo make install<br></code></pre></td></tr></table></figure><h3 id="更改引导"><a href="#更改引导" class="headerlink" title="更改引导"></a>更改引导</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo update-initramfs -c -k 5.10.0<br></code></pre></td></tr></table></figure><h3 id="更改grub"><a href="#更改grub" class="headerlink" title="更改grub"></a>更改<code>grub</code></h3><p>修改文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vi /etc/default/grub<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#GRUB_TIMEOUT_STYLE=hidden</span><br>GRUB_TIMEOUT=10<br></code></pre></td></tr></table></figure><p>更新</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo update-grub<br></code></pre></td></tr></table></figure><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">reboot<br></code></pre></td></tr></table></figure><p>在<code>GRUB</code>页面选择<code>Advanced options for Ubuntu</code></p><p><img src="/image/Linux%E5%86%85%E6%A0%B8/image-20230515104210488.png" alt="image-20230515104210488"></p><p>选择需要启动的内核版本</p><p><img src="/image/Linux%E5%86%85%E6%A0%B8/image-20230517111217516.png" alt="image-20230517111217516"></p><p><img src="/image/Linux%E5%86%85%E6%A0%B8/image-20230515101713706.png" alt="image-20230517111217516"></p><center>安装新内核之前的内核版本</center><p><img src="/image/Linux%E5%86%85%E6%A0%B8/image-20230517110513053.png" alt="image-20230517110513053"></p><center>安装新内核之后</center><p><a href="#GRUB">若重启未看到选择内核的页面参考</a></p><h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><h3 id="清理内核源目录"><a href="#清理内核源目录" class="headerlink" title="清理内核源目录"></a>清理内核源目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># make mrproper会删除配置的.config以及其他备份</span><br>sudo make mrproper<br><span class="hljs-comment"># make clean会删除编译过程中生成的中间文件和内核镜像文件</span><br>sudo make clean<br></code></pre></td></tr></table></figure><h3 id="卸载安装的内核"><a href="#卸载安装的内核" class="headerlink" title="卸载安装的内核"></a>卸载安装的内核</h3><p>获取所有安装的内核版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dpkg --get-selections | grep linux<br></code></pre></td></tr></table></figure><p>选择要卸载的版本，卸载下列安装包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt remove linux-image-&lt;版本&gt;-generic<br>sudo apt remove linux-headers-&lt;版本&gt;<br>sudo apt remove linux-headers-&lt;版本&gt;-generic<br>sudo apt remove linux-modules-&lt;版本&gt;-generic<br></code></pre></td></tr></table></figure><p>卸载源码版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">rm</span> /boot/vmlinuz-5.10.0<br>sudo <span class="hljs-built_in">rm</span> /boot/initrd.img-5.10.0<br>sudo <span class="hljs-built_in">rm</span> /boot/System.map-5.10.0<br>sudo <span class="hljs-built_in">rm</span> /boot/config-5.10.0<br>sudo <span class="hljs-built_in">rm</span> -rf /lib/modules/5.10.0<br></code></pre></td></tr></table></figure><p>更新启动引导</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo update-grub<br></code></pre></td></tr></table></figure><h3 id="修改内核配置菜单实现对新加入内核源码的控制"><a href="#修改内核配置菜单实现对新加入内核源码的控制" class="headerlink" title="修改内核配置菜单实现对新加入内核源码的控制"></a>修改内核配置菜单实现对新加入内核源码的控制</h3><ol><li><p>将源码拷贝到内核对应的文件夹下</p></li><li><p>为配置界面添加控制新加入源代码的内容</p><p> 在加入源码的目录下创建<code>Kconfig</code>文件，便添加相应控制内容</p></li><li><p>修改上层<code>Kconfig</code>文件，包含新加入源码的<code>Kconfig</code>文件。</p></li><li><p>修改<code>Makefile</code>文件</p></li><li><p>修改上一级目录的Makefile</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">make[1]: *** No rule to make target <span class="hljs-string">&#x27;debian/canonical-certs.pem&#x27;</span>, needed by <span class="hljs-string">&#x27;certs/x509_certificate_list&#x27;</span>.  Stop.<br>make: *** [Makefile:1868: certs] Error 2<br></code></pre></td></tr></table></figure><p>解决方法<a href="https://www.youtube.com/watch?v=7G3UkugVhOw">(104) how to fix the error “No rule to make target ‘debian canonical certs pem’, needed by ‘certs x509 cer - YouTube</a>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">nano .config<br>查找到debian/canonical-certs.pem和debian/canonical-revoked-certs.pem字符串删除<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">BTF: .tmp_vmlinux.btf: pahole (pahole) is not available<br></code></pre></td></tr></table></figure><p>解决方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install dwarves<br></code></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1-Module-symvers-is-missing"><a href="#1-Module-symvers-is-missing" class="headerlink" title="1. Module.symvers is missing"></a>1. Module.symvers is missing</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">WARNING: Symbol version dump <span class="hljs-string">&quot;Module.symvers&quot;</span> is missing.<br>         Modules may not have dependencies or modversions.<br>         You may get many unresolved symbol warnings.<br></code></pre></td></tr></table></figure><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make modules_prepare<br></code></pre></td></tr></table></figure><h3 id="2-No-rule-to-make-target-‘debian-x2F-canonical-certs-pem‘-needed-by-‘certs-x2F-x509-certificate-list‘"><a href="#2-No-rule-to-make-target-‘debian-x2F-canonical-certs-pem‘-needed-by-‘certs-x2F-x509-certificate-list‘" class="headerlink" title="2. No rule to make target ‘debian&#x2F;canonical-certs.pem‘, needed by ‘certs&#x2F;x509_certificate_list‘"></a>2. No rule to make target ‘debian&#x2F;canonical-certs.pem‘, needed by ‘certs&#x2F;x509_certificate_list‘</h3><p>可以修改config：</p><p>vim .config</p><p>修改<code>CONFIG_SYSTEM_TRUSTED_KEYS</code>，将其置空： CONFIG_SYSTEM_TRUSTED_KEYS&#x3D;””<em>也可能需要设置</em>CONFIG_SYSTEM_REVOCATION_KEYS为空。</p><h3 id="3-FAILED-load-BTF-from-vmlinux-No-such-file-or-directory"><a href="#3-FAILED-load-BTF-from-vmlinux-No-such-file-or-directory" class="headerlink" title="3. FAILED:load BTF from vmlinux:No such file or directory"></a>3. FAILED:load BTF from vmlinux:No such file or directory</h3><p>vim .config</p><p>修改<code>CONFIG_DEBUG_INFO_BTF</code>，将其置n</p><h3 id="4-安装完内核之后无法显示GRUB用以选择内核启动"><a href="#4-安装完内核之后无法显示GRUB用以选择内核启动" class="headerlink" title="4. 安装完内核之后无法显示GRUB用以选择内核启动"></a>4. 安装完内核之后无法显示<code>GRUB</code>用以选择内核启动<a name="GRUB"/></h3><p>进入命令行之后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vi /etc/default/grub<br></code></pre></td></tr></table></figure><p>注释掉</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># GRUB_TIMEOUT_STYLE=hidden</span><br></code></pre></td></tr></table></figure><p>修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">GRUB_TIMEOUT=10<br><br>GRUB_COMLINE_LINUX_DEFAULT=<span class="hljs-string">&quot;text&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/image/Linux%E5%86%85%E6%A0%B8/image-20230515103459264.png" alt="image-20230515103459264"></p><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo update-grub<br></code></pre></td></tr></table></figure><p><img src="/image/Linux%E5%86%85%E6%A0%B8/image-20230515103559801.png" alt="image-20230515103559801"></p><h3 id="5-内核启动卡在loading-initial-ramdisk"><a href="#5-内核启动卡在loading-initial-ramdisk" class="headerlink" title="5. 内核启动卡在loading initial ramdisk"></a>5. 内核启动卡在<code>loading initial ramdisk</code><a name="ramdisk"/></h3><p>编译内核过程中，当安装内核模块时未使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">INSTALL_MOD_STRIP=1<br></code></pre></td></tr></table></figure><p>标注，会导致<code>initrd</code>文件过大，Ubuntu 20.04所用的Grub 2.04无法支持过大的initrd文件（如500M），导致内核启动时卡在<code>“loading initial ramdisk”（Can’t allocate initrd）</code>。</p><p>可行的办法：</p><p>安装模块时加上<code>INSTALL_MOD_STRIP=1</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo make INSTALL_MOD_STRIP=1 modules_install<br></code></pre></td></tr></table></figure><h3 id="6-sign-file-No-such-file-or-directory"><a href="#6-sign-file-No-such-file-or-directory" class="headerlink" title="6. sign-file: : No such file or directory"></a>6. sign-file: : No such file or directory</h3><p>报错信息：</p><p><img src="/image/Linux%E5%86%85%E6%A0%B8/image-20230516082845572.png" alt="image-20230516082845572"></p><p>解决方法：</p><p> 将<code>.config</code>的 <code>CONFIG_MODULE_SIG_KEY=&quot;cert/signing_key.pem&quot;</code>恢复后解决。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">CONFIG_MODULE_SIG_KEY=<span class="hljs-string">&quot;cert/signing_key.pem&quot;</span><br></code></pre></td></tr></table></figure><h3 id="7-zstd-not-found"><a href="#7-zstd-not-found" class="headerlink" title="7. zstd: not found"></a>7. zstd: not found</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">ZSTD22  <span class="hljs-built_in">arch</span>/x86/boot/compressed/vmlinux.bin.zst<br>/bin/sh: 1: zstd: not found<br>make[2]: *** [<span class="hljs-built_in">arch</span>/x86/boot/compressed/Makefile:134：<span class="hljs-built_in">arch</span>/x86/boot/compressed/vmlinux.bin.zst] 错误 127<br>make[2]: *** 正在删除文件“<span class="hljs-built_in">arch</span>/x86/boot/compressed/vmlinux.bin.zst” make[1]: *** [<span class="hljs-built_in">arch</span>/x86/boot/Makefile:115：<span class="hljs-built_in">arch</span>/x86/boot/compressed/vmlinux] 错误 2<br></code></pre></td></tr></table></figure><p>解决方法</p><p>在配置内核时更改<code>Kernel compression mode</code>为<code>LZMA</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">General setup  ---&gt;<br>Kernel compression mode (LZMA)  ---&gt;<br></code></pre></td></tr></table></figure><p>保存后重新编译安装即可。</p><h2 id="单独编译Linux内核的某一个模块"><a href="#单独编译Linux内核的某一个模块" class="headerlink" title="单独编译Linux内核的某一个模块"></a>单独编译Linux内核的某一个模块</h2><p>找到对应的模块文件夹，找到需要编译的文件，确认编译的config文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make CONFIG_INFINIBAND=m -C &lt;源码&gt; M=&lt;模块文件夹&gt; modules<br></code></pre></td></tr></table></figure><h1 id="qemu-gdb调试linux内核"><a href="#qemu-gdb调试linux内核" class="headerlink" title="qemu+gdb调试linux内核"></a>qemu+gdb调试linux内核</h1><h2 id="安装qemu"><a href="#安装qemu" class="headerlink" title="安装qemu"></a>安装qemu</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install qemu<br></code></pre></td></tr></table></figure><h2 id="配置调试版内核"><a href="#配置调试版内核" class="headerlink" title="配置调试版内核"></a>配置调试版内核</h2><p>对内核进行调试需要解析符号信息，所以得编译一个调试版内核。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> linux-5.15<br>make menuconfig<br></code></pre></td></tr></table></figure><p>这里需要开启内核参数<code>CONFIG_DEBUG_INFO</code>和<code>CONFIG_GDB_SCRIPTS</code>。GDB提供了Python接口来扩展功能，内核基于Python接口实现了一系列辅助脚本，简化内核调试，开启<code>CONFIG_GDB_SCRIPTS</code>参数就可以使用了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">Kernel hacking  ---&gt;<br>    [*] Kernel debugging<br>    Compile-time checks and compiler options  ---&gt;<br>        [*] Compile the kernel with debug info<br>        [*]   Provide GDB scripts <span class="hljs-keyword">for</span> kernel debugging<br></code></pre></td></tr></table></figure><h2 id="构建initramfs根文件系统"><a href="#构建initramfs根文件系统" class="headerlink" title="构建initramfs根文件系统"></a>构建initramfs根文件系统</h2><p>Linux系统启动阶段，boot loader加载完内核文件vmlinuz后，内核紧接着需要挂载磁盘根文件系统，但如果此时内核没有相应驱动，无法识别磁盘，就需要先加载驱动，而驱动又位于<code>/lib/modules</code>，得挂载根文件系统才能读取，这就陷入了一个两难境地，系统无法顺利启动。于是有了initramfs根文件系统，其中包含必要的设备驱动和工具，boot loader加载initramfs到内存中，内核会将其挂载到根目录<code>/</code>,然后运行<code>/init</code>脚本，挂载真正的磁盘根文件系统。</p><p>这里借助<a href="https://www.busybox.net/">BusyBox</a>构建极简initramfs，提供基本的用户态可执行程序。</p><p>编译BusyBox，配置<code>CONFIG_STATIC</code>参数，编译静态版BusyBox，编译好的可执行文件<code>busybox</code>不依赖动态链接库，可以独立运行，方便构建initramfs。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> busybox-1.28.0<br>make menuconfig<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">Settings  ---&gt;<br>    [*] Build static binary (no shared libs)<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">make -j 20<br>make install<br></code></pre></td></tr></table></figure><p>会安装在<code>_install</code>目录:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> _install<br>bin  linuxrc  sbin  usr<br></code></pre></td></tr></table></figure><p>创建initramfs，其中包含BusyBox可执行程序、必要的设备文件、启动脚本<code>init</code>。这里没有内核模块，如果需要调试内核模块，可将需要的内核模块包含进来。<code>init</code>脚本只挂载了虚拟文件系统<code>procfs</code>和<code>sysfs</code>，没有挂载磁盘根文件系统，所有调试操作都在内存中进行，不会落磁盘。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> initramfs<br><span class="hljs-built_in">cd</span> initramfs<br><span class="hljs-built_in">cp</span> ../_install/* -rf ./<br><span class="hljs-built_in">mkdir</span> dev proc sys<br>sudo <span class="hljs-built_in">cp</span> -a /dev/&#123;null, console, <span class="hljs-built_in">tty</span>, tty1, tty2, tty3, tty4&#125; ./dev/<br><span class="hljs-built_in">rm</span> linuxrc<br>vim init<br><span class="hljs-built_in">chmod</span> a+x init<br><span class="hljs-built_in">ls</span><br>bin   dev  init  proc  sbin  sys   usr<br></code></pre></td></tr></table></figure><p>init文件的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br>mount -t proc none /proc<br>mount -t sysfs none /sys<br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\nBoot took <span class="hljs-subst">$(cut -d&#x27; &#x27; -f1 /proc/uptime)</span> seconds\n&quot;</span><br><span class="hljs-built_in">exec</span> /bin/sh<br></code></pre></td></tr></table></figure><p>打包initramfs</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find . -print0 | cpio --null -ov --format=newc | gzip -9 &gt; ../initramfs.cpio.gz<br></code></pre></td></tr></table></figure><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> busybox-xxx<br>qemu-system-x86_64 -s -kernel /path/to/vmlinux -initrd initramfs.cpio.gz -nographic -append <span class="hljs-string">&quot;console=ttyS0&quot;</span><br></code></pre></td></tr></table></figure><ul><li><code>-s</code> 是<code>-gdb tcp::1234</code>的缩写，监听1234端口，在GDB中通过<code>target remote localhost:1234</code>连接；</li><li><code>-kernel</code> 指定编译好的调试内核<code>vmlinux</code>路径；</li><li><code>initrd</code> 指定制作好的<code>initramfs</code>；</li><li><code>-nographic</code>取消图形输出窗口，试qemu成简单的命令行程序。</li><li><code>-append &quot;console=ttyS0&quot;</code>将输出重定向到console，将会显示在标准输出stdio。</li></ul><p>启动后的根目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">/ <span class="hljs-built_in">ls</span><br>bin   dev  init  proc  root  sbin  sys   usr<br></code></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://consen.github.io/2018/01/17/debug-linux-kernel-with-qemu-and-gdb/">使用QEMU和GDB调试Linux内核 | Consen</a></p><p><a href="https://www.cnblogs.com/dream397/p/13984263.html">Linux下使用内核源码单独编译某一模块 - tycoon3 - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/phmatthaus/article/details/124353775">内核错误: No rule to make target ‘debian&#x2F;canonical-certs.pem‘, needed by ‘certs&#x2F;x509_certificate_list‘_no rule to make target ‘debian&#x2F;canonical-certs.pem_蓝天居士的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/yaoxinJJJ/article/details/115433638">Linux 内核 下载 编译 安装 2021 ubuntu_yaoxinJJJ的博客-CSDN博客</a></p><p><a href="https://www.zhaixue.cc/kernel/kernel-module_sysmvers.html">内核Module.symvers文件揭秘 - Linux内核编程 | 宅学部落 (zhaixue.cc)</a></p><p><a href="https://www.cnblogs.com/harrypotterjackson/p/11846222.html">如何编译安装Linux内核 - LightningStar - 博客园 (cnblogs.com)</a></p><p><a href="https://www.cnblogs.com/gmpy/p/12533548.html">ubuntu上更新和卸载Linux内核 - 广漠飘羽 - 博客园 (cnblogs.com)</a></p><p><a href="https://github.com/chiwent/blog/issues/1">关于Ubuntu内核(更新和卸载内核、取消自动更新) · Issue #1 · chiwent&#x2F;blog (github.com)</a></p><p><a href="https://blog.csdn.net/HandsomeHong/article/details/125157372">自行编译内核，启动内核卡在“loading initial ramdisk”_启动卡在initrd_奇妙之二进制的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/bdwdwks/article/details/106294349">linux——编译内核（ubuntu18.04+linux-5.6.4）</a></p><p><a href="https://blog.csdn.net/weixin_52592969/article/details/127815302">编译内核 make modules_install报错SSL error:02001002:system library:fopen:No such file or directory_ssl: error:02001002_酱山楂的博客-CSDN博客</a></p><p><a href="https://www.kernel.org/doc/html/latest/translations/zh_CN/index.html">中文翻译 — The Linux Kernel documentation</a> Linux内核中文文档。</p><p><a href="https://blog.csdn.net/sustwct/article/details/7109251">[arch&#x2F;x86&#x2F;boot&#x2F;compressed&#x2F;vmlinux.bin.lzma] Error 1_sustwct的博客-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>qemu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PetaLinux常用操作</title>
    <link href="/2023/06/12/PetaLinux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <url>/2023/06/12/PetaLinux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="安装petalinux2022-2"><a href="#安装petalinux2022-2" class="headerlink" title="安装petalinux2022.2"></a>安装petalinux2022.2</h1><ol><li>安装依赖包</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install iproute2 gawk python3 python build-essential gcc git make net-tools libncurses5-dev tftpd zlib1g-dev libssl-dev flex bison libselinux1 gnupg wget git-core diffstat chrpath socat xterm autoconf libtool tar unzip texinfo zlib1g-dev gcc-multilib automake zlib1g:i386 screen pax gzip cpio python3-pip python3-pexpect xz-utils debianutils iputils-ping python3-git python3-jinja2 libegl1-mesa libsdl1.2-dev pylint3 libtinfo5<br></code></pre></td></tr></table></figure><ol start="2"><li>更改文件夹权限</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mkdir</span> petalinux2022.2<br>sudo <span class="hljs-built_in">chmod</span> 777 petalinux2022 ./<br></code></pre></td></tr></table></figure><ol start="3"><li>下载<code>petalinux2022.2</code>安装包</li></ol><p>地址：<a href="https://www.xilinx.com/support/download/index.html/content/xilinx/en/downloadNav/embedded-design-tools.html">Downloads (xilinx.com)</a></p><ol start="4"><li>更改默认shell</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash<br></code></pre></td></tr></table></figure><ol start="5"><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./petalinux-v2022.2-10141622-installer.run -d ./petalinux2022.2<br></code></pre></td></tr></table></figure><p>安装过程需要同意许可信息，输入三次y。</p><h1 id="qemu启动"><a href="#qemu启动" class="headerlink" title="qemu启动"></a>qemu启动</h1><p>参考《ug1144-petalinux-tools-reference-guide.pdf》</p><h2 id="1-生成-BIN镜象"><a href="#1-生成-BIN镜象" class="headerlink" title="1. 生成.BIN镜象"></a>1. 生成.BIN镜象</h2><p>粘贴相应的<code>.bit</code>至<code>plnx-proj-root/images/linux/</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> &lt;plnx-proj-root&gt;<br>petalinux-package --boot --format BIN --fsbl --u-boot --pmufw --fpga ./images/linux/design_1_wrapper.bit --force<br></code></pre></td></tr></table></figure><h2 id="2-封装预构建镜像"><a href="#2-封装预构建镜像" class="headerlink" title="2. 封装预构建镜像"></a>2. 封装预构建镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">petalinux-package --prebuilt --fpga ./images/linux/design_1_wrapper.bit --force<br></code></pre></td></tr></table></figure><h2 id="3-启动qemu"><a href="#3-启动qemu" class="headerlink" title="3. 启动qemu"></a>3. 启动qemu</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">petalinux-boot --qemu --prebuilt 3<br></code></pre></td></tr></table></figure><p>注意：若使用<code>petalinux2021</code>启动qemu需要在xilinx官网下载某个版本的<code>.bsp</code>，将其中的<code>pmu_rom_qemu_sha3.elf</code> 拷贝到<code>&lt;plnx-proj-root&gt;/pre-built/linux/images</code>下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">eddy@eddy:~/code/test$ petalinux-boot --qemu --prebuilt 3<br>[INFO] Sourcing buildtools<br>INFO: No DTB has been specified, use the default one <span class="hljs-string">&quot;/home/eddy/code/test/pre-built/linux/images/system.dtb&quot;</span>.<br>INFO: No DTB has been specified, use the default one <span class="hljs-string">&quot;/home/eddy/code/test/pre-built/linux/images/system.dtb&quot;</span>.<br>INFO: Starting microblaze QEMU<br>INFO: Starting the above QEMU <span class="hljs-built_in">command</span> <span class="hljs-keyword">in</span> the background<br>INFO:  qemu-system-microblazeel -M microblaze-fdt   -serial mon:stdio -serial /dev/null -display none -kernel /home/eddy/code/test/pre-built/linux/images/pmu_rom_qemu_sha3.elf -device loader,file=/home/eddy/code/test/pre-built/linux/images/pmufw.elf      -hw-dtb /home/eddy/code/test/pre-built/linux/images/zynqmp-qemu-multiarch-pmu.dtb -machine-path /tmp/tmp.zRXyRZk5bx -device loader,addr=0xfd1a0074,data=0x1011003,data-len=4 -device loader,addr=0xfd1a007C,data=0x1010f03,data-len=4<br>qemu-system-microblazeel: Failed to connect socket /tmp/tmp.zRXyRZk5bx/qemu-rport-_pmu@0: No such file or directory<br>qemu-system-microblazeel: info: QEMU waiting <span class="hljs-keyword">for</span> connection on: disconnected:unix:/tmp/tmp.zRXyRZk5bx/qemu-rport-_pmu@0,server<br>INFO: TCP PORT is free<br>INFO: Starting aarch64 QEMU<br>INFO:  qemu-system-aarch64 -M arm-generic-fdt   -serial /dev/null -serial mon:stdio -display none -device loader,file=/home/eddy/code/test/pre-built/linux/images/bl31.elf,cpu-num=0 -device loader,file=/home/eddy/code/test/pre-built/linux/images/rootfs.cpio.gz.u-boot,addr=0x04000000,force-raw -device loader,file=/home/eddy/code/test/pre-built/linux/images/u-boot.elf -device loader,file=/home/eddy/code/test/pre-built/linux/images/Image,addr=0x00200000,force-raw -device loader,file=/home/eddy/code/test/pre-built/linux/images/system.dtb,addr=0x00100000,force-raw -device loader,file=/home/eddy/code/test/pre-built/linux/images/boot.scr,addr=0x20000000,force-raw -gdb tcp::9000   -net nic,netdev=eth0 -netdev user,<span class="hljs-built_in">id</span>=eth0,tftp=/tftpboot -net nic -net nic -net nic -net nic   -hw-dtb /home/eddy/code/test/pre-built/linux/images/zynqmp-qemu-multiarch-arm.dtb -machine-path /tmp/tmp.zRXyRZk5bx -global xlnx,zynqmp-boot.cpu-num=0 -global xlnx,zynqmp-boot.use-pmufw=<span class="hljs-literal">true</span>   -m 4G<br>QEMU 5.1.0 monitor - <span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;help&#x27;</span> <span class="hljs-keyword">for</span> more information<br>(qemu) qemu-system-aarch64: warning: hub port hub0port3 has no peer<br>qemu-system-aarch64: warning: hub 0 is not connected to host network<br>qemu-system-aarch64: warning: netdev hub0port3 has no peer<br>qemu-system-aarch64: warning: requested NIC (__org.qemu.net4, model unspecified) was not created (not supported by this machine?)<br>PMU Firmware 2021.1Jun  6 2021   07:07:32<br>PMU_ROM Version: xpbr-v8.1.0-0<br>NOTICE:  ATF running on XCZUUNKN/QEMU v4/RTL0.0 at 0xfffea000<br>NOTICE:  BL31: v2.4(release):xlnx_rebase_v2.4_2021.1_update1<br>NOTICE:  BL31: Built : 08:27:07, Apr 28 2021<br><br></code></pre></td></tr></table></figure><h2 id="打包BSP"><a href="#打包BSP" class="headerlink" title="打包BSP"></a>打包BSP</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">petalinux-package --bsp -p 2021-25-mcdma/ --hwsource eth_25g_2021-3-8/ -o 2021-25-mcdma.bsp --force<br></code></pre></td></tr></table></figure><p><code>psu_init</code> 是FSBL中的一个函数，用于初始化PS端</p><h1 id="petalinux-qemu-调试linux内核"><a href="#petalinux-qemu-调试linux内核" class="headerlink" title="petalinux qemu 调试linux内核"></a>petalinux qemu 调试linux内核</h1><ol><li><p>启动<code>qemu</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">petalinux-boot --qemu --prebuilt 3<br></code></pre></td></tr></table></figure></li><li><p>进入<code>&lt;plnx-proj-root&gt;image/linux</code>文件夹</p></li><li><p>进行<code>gdb</code>调试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash'">petalinux-util --gdb vmlinux<br></code></pre></td></tr></table></figure></li></ol><p><a href="https://wenfh2020.com/2021/05/19/gdb-kernel-networking/">gdb 调试 Linux 内核网络源码（附视频） (wenfh2020.com)</a></p><h2 id="调试步骤-6"><a href="#调试步骤-6" class="headerlink" title="调试步骤[6]"></a>调试步骤<sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="[petalinux调试内核_StarLish0715的博客-CSDN博客](https://blog.csdn.net/baidu_37503452/article/details/80106440)">[6]</span></a></sup></h2><p>可参考《ug1144-petalinux-tools-reference-guide.pdf》 Debugging节</p><ol><li><p>启动qemu</p></li><li><p>执行gdb调试命令</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">petalinux-util --gdb vmlinux<br></code></pre></td></tr></table></figure><h1 id="创建zynqMP自定义工程-1"><a href="#创建zynqMP自定义工程-1" class="headerlink" title="创建zynqMP自定义工程[1]"></a>创建<code>zynqMP</code>自定义工程<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[PetaLinux - Public Docs - Trenz Electronic Wiki (trenz-electronic.de)](https://wiki.trenz-electronic.de/display/PD/PetaLinux) petalinux工程创建等使用">[1]</span></a></sup></h1><h2 id="创建-xsa文件"><a href="#创建-xsa文件" class="headerlink" title="创建.xsa文件"></a>创建<code>.xsa</code>文件</h2><p>使用<code>Vivado</code>创建工程并生成<code>xsa</code>文件</p><h2 id="创建自定义工程"><a href="#创建自定义工程" class="headerlink" title="创建自定义工程"></a>创建自定义工程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">petalinux-create -t project --template zynqMP --name &lt;name&gt;<br></code></pre></td></tr></table></figure><h2 id="工程配置"><a href="#工程配置" class="headerlink" title="工程配置"></a>工程配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> &lt;plnx-proj-root&gt;<br>petalinux-config --get-hw-description &lt;name&gt;.xsa<br><br>petalinux-config<br><span class="hljs-comment">#默认配置</span><br><br>petalinux-config -c kernel<br><span class="hljs-comment">#配置内核</span><br><br>petalinux-config -c rootfs<br><span class="hljs-comment">#配置文件系统</span><br><br>petalinux-config -c u-boot<br><span class="hljs-comment">#配置u-boot</span><br></code></pre></td></tr></table></figure><p>对构建的工程进行实际的配置</p><h3 id="配置启动地址信息"><a href="#配置启动地址信息" class="headerlink" title="配置启动地址信息"></a>配置启动地址信息</h3><p>进入<code>u-boot Configuration  ---&gt;</code> <code>u-boot script configuration  ---&gt;</code>根据启动方式以及各文件大小进行配置。</p><p><img src="/image/petalinux/image-20230516202016744.png" alt="image-20230516202016744"></p><h2 id="工程编译"><a href="#工程编译" class="headerlink" title="工程编译"></a>工程编译</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> &lt;plnx-proj-root&gt;<br>petalinux-build<br><span class="hljs-comment">#整个工程编译，编译后生成image.ub</span><br><br>petalinux-build -c kernel<br><span class="hljs-comment">#编译内核</span><br><br>petalinux-build -c rootfs<br><span class="hljs-comment">#编译文件系统</span><br><br>petalinux-build -c u-boot<br><span class="hljs-comment">#编译u-boot</span><br><br>petalinux-build -x distclean<br><span class="hljs-comment">#清空编译后产生的临时文件和下载的sstate cache文件</span><br><br>petalinux-build -x mrproper<br><span class="hljs-comment">#清空所有的临时文件，&lt;PROJECT&gt;/images/,  &lt;PROJECT&gt;/build/  and &lt;PROJECT&gt;/components/plnx_workspace/ directories</span><br><br><br><span class="hljs-string">&quot;petalinux-build -x package&quot;</span> 是 PetaLinux 工具的命令，它用于构建 PetaLinux 项目。PetaLinux 是一个用于嵌入式设备的 Linux 发行版，由 Xilinx 公司开发。PetaLinux 提供了一些工具和命令，用于构建、调试和定制 Linux 系统。其中 <span class="hljs-string">&quot;petalinux-build&quot;</span> 就是用于构建 PetaLinux 项目的命令，而 <span class="hljs-string">&quot;-x package&quot;</span> 则表示只构建指定的软件包。<br><br><span class="hljs-comment">#打包到image.ub</span><br><br>petalinux-build -c mymodule -x do_cleansstate<br><span class="hljs-comment">#清除用户模块</span><br></code></pre></td></tr></table></figure><h3 id="离线编译工程配置"><a href="#离线编译工程配置" class="headerlink" title="离线编译工程配置"></a>离线编译工程配置</h3><p>下载离线包<a href="https://www.xilinx.com/support/download/index.html/content/xilinx/en/downloadNav/embedded-design-tools/archive.html">Downloads (xilinx.com)</a></p><p><img src="/image/petalinux/image-20230516163136806.png" alt="image-20230516163136806"></p><p>下载上述两个压缩包。</p><p>当前环境为 petalinux2021.1 设备为<code>250soc</code> （xilinx ）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> &lt;plnx-proj-root&gt;<br>petalinux-config --get-hw-description &lt;name&gt;.xsa<br></code></pre></td></tr></table></figure><p>进入<code>Linux Components Selection</code>  —&gt; <code>u-boot（u-boot-xlinx）</code>以及<code>linux-kernel</code>均选择<code>ext-local-src</code>，配置离线编译包。</p><p><img src="/image/petalinux/image-20230516155842635.png" alt="image-20230516155842635"></p><p><img src="/image/petalinux/image-20230516160123087.png" alt="image-20230516160123087"></p><p><img src="/image/petalinux/image-20230516160222677.png" alt="image-20230516160222677"></p><p>进入<code>Subsystem AUTO Hardware Settings  ---&gt;</code> <code>Serial Settings  ---&gt;</code> 将串口均选择为<code>psu_uart_1</code></p><p><img src="/image/petalinux/image-20230516160245000.png" alt="image-20230516160245000"></p><p>原因是根据<code>.xsa</code>生成的设备树中将<code>uart1</code>配到了设备的<code>serial0</code>。</p><p><img src="/image/petalinux/image-20230516160555650.png" alt="image-20230516160555650"></p><p>若要使用<code>qemu</code>启动，此步骤可空过，若使用板子启动需要将这里的<code>INITRAMFS/INITRD Image name</code>更改为如下<code>petalinux-image-minimal</code>，若更改后使用qemu启动会出现<a href="#dev">ERROR &#x2F;dev</a>的错误。</p><p><img src="/image/petalinux/image-20230516160724405.png" alt="image-20230516160724405"></p><p>配置离线包</p><p>进入<code>Yocto Settings  ---&gt;</code> <code>Add pre-mirror url   ---&gt; </code> 更改为下载的离线包的位置</p><p><img src="/image/petalinux/image-20230516161519634.png" alt="image-20230516161519634"></p><p>注意：这里需要在最前面加上<code>file://</code>。</p><p>配置<code>sstate</code>：</p><p><img src="/image/petalinux/image-20230516161650342.png" alt="image-20230516161650342"></p><p>其他配置可根据情况修改。推出前需保存。</p><p>注意：若中途需要远程下载相应的app或者包文件，需要是能开启<code>Enable Network sstate feeds</code>。防止编译报错。</p><p>若存在<code>app</code>或<code>packages</code>，需要进入文件系统配置中添加相应的选项。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">petalinux-config -c rootfs<br></code></pre></td></tr></table></figure><p><img src="/image/petalinux/image-20230516161900744.png" alt="image-20230516161900744"></p><p>进入<code>build/conf</code>编辑<code>local.conf</code></p><p><img src="/image/petalinux/image-20230516163537432.png" alt="image-20230516163537432"></p><p>配置完成后若想加<code>app</code>或者<code>packages</code>，需要在<code>project-spec</code>对应的<code>mate-user</code>中添加自己的文件，或有现成的<code>mate-user</code>，直接将此文件夹进行替换即可。</p><p>配置完成后即可进行编译。</p><h2 id="创建自定义模块"><a href="#创建自定义模块" class="headerlink" title="创建自定义模块"></a>创建自定义模块</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> &lt;plnx-proj-root&gt;<br>petalinux-create -t modules --name &lt;user-module-name&gt; --<span class="hljs-built_in">enable</span><br><br>petalinux-create -t apps --template c --name myapp --<span class="hljs-built_in">enable</span><br></code></pre></td></tr></table></figure><h1 id="JTAG烧写"><a href="#JTAG烧写" class="headerlink" title="JTAG烧写"></a>JTAG烧写</h1><h2 id="tcl文件"><a href="#tcl文件" class="headerlink" title=".tcl文件"></a><code>.tcl</code>文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#connect</span><br>fpga -no-revision-check -f design_1_wrapper.bit<br>after 2000<br>targets -<span class="hljs-built_in">set</span> -filter &#123;name =~ <span class="hljs-string">&quot;PSU&quot;</span>&#125;<br>mask_write 0xFFCA0038 0x1C0 0x1C0<br>after 500<br><span class="hljs-comment">#Load and run PMUFW</span><br>targets -<span class="hljs-built_in">set</span> -filter &#123;name =~ <span class="hljs-string">&quot;MicroBlaze PMU&quot;</span>&#125;<br>dow pmu-firmware-250soc-zynqmp.elf<br>con<br>after 500<br><span class="hljs-comment">#Reset A53, load and run FSBL</span><br>targets -<span class="hljs-built_in">set</span> -filter &#123;name =~ <span class="hljs-string">&quot;PS8&quot;</span> || name =~ <span class="hljs-string">&quot;PSU&quot;</span>&#125;<br>mwr 0xffff0000 0x14000000;mask_write 0xFD1A0104 0x501 0x0<br>targets -<span class="hljs-built_in">set</span> -filter &#123;name =~ <span class="hljs-string">&quot;Cortex-A53 #0&quot;</span>&#125;<br><span class="hljs-built_in">source</span> psu_init.tcl<br>dow fsbl-250soc-zynqmp.elf<br>con<br><span class="hljs-comment">#Give FSBL time to run</span><br>after 5000<br>stop<br>psu_ps_pl_isolation_removal; psu_ps_pl_reset_config<br>after 500<br>dow u-boot.elf<br>after 500<br>dow arm-trusted-firmware.elf<br>after 500<br>con<br>after 2000<br>dow -data image.ub 0x8000000<br><br></code></pre></td></tr></table></figure><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="boot-src文件"><a href="#boot-src文件" class="headerlink" title="boot.src文件"></a><code>boot.src</code>文件</h2><p><code>boot.src</code> 文件是一个包含启动指令的文本文件，用于在 U-Boot 环境中设置启动选项和执行启动操作。该文件通常包含一些环境变量设置、内存和设备初始化、加载内核映像和设备树文件等操作。</p><p><code>connfig</code>文件启动地址信息相关配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#</span><br><span class="hljs-comment"># JTAG/DDR image offsets</span><br><span class="hljs-comment">#</span><br>CONFIG_SUBSYSTEM_UBOOT_DEVICETREE_OFFSET=0x100000<br>CONFIG_SUBSYSTEM_UBOOT_KERNEL_OFFSET=0x200000<br>CONFIG_SUBSYSTEM_UBOOT_RAMDISK_IMAGE_OFFSET=0x4000000<br>CONFIG_SUBSYSTEM_UBOOT_FIT_IMAGE_OFFSET=0x10000000<br><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># QSPI/OSPI image offsets</span><br><span class="hljs-comment">#</span><br>CONFIG_SUBSYSTEM_UBOOT_QSPI_KERNEL_OFFSET=0xF00000<br>CONFIG_SUBSYSTEM_UBOOT_QSPI_KERNEL_SIZE=0x1D00000<br>CONFIG_SUBSYSTEM_UBOOT_QSPI_RAMDISK_OFFSET=0x4000000<br>CONFIG_SUBSYSTEM_UBOOT_QSPI_RAMDISK_SIZE=0x4000000<br>CONFIG_SUBSYSTEM_UBOOT_QSPI_FIT_IMAGE_OFFSET=0xF40000<br>CONFIG_SUBSYSTEM_UBOOT_QSPI_FIT_IMAGE_SIZE=0x6400000<br><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># NAND image offsets</span><br><span class="hljs-comment">#</span><br>CONFIG_SUBSYSTEM_UBOOT_NAND_KERNEL_OFFSET=0x4100000<br>CONFIG_SUBSYSTEM_UBOOT_NAND_KERNEL_SIZE=0x3200000<br>CONFIG_SUBSYSTEM_UBOOT_NAND_RAMDISK_OFFSET=0x7800000<br>CONFIG_SUBSYSTEM_UBOOT_NAND_RAMDISK_SIZE=0x3200000<br>CONFIG_SUBSYSTEM_UBOOT_NAND_FIT_IMAGE_OFFSET=0x4180000<br>CONFIG_SUBSYSTEM_UBOOT_NAND_FIT_IMAGE_SIZE=0x6400000<br>CONFIG_SUBSYSTEM_UBOOT_KERNEL_IMAGE=<span class="hljs-string">&quot;Image&quot;</span><br>CONFIG_SUBSYSTEM_UBOOT_FIT_IMAGE=<span class="hljs-string">&quot;image.ub&quot;</span><br><span class="hljs-comment"># CONFIG_SUBSYSTEM_UBOOT_EXT_DTB is not set</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&#x27;V\8i+M\9B\9E\F0\00\00\E2\00\00\00\00\00\00\00\00\85w\9Cr\00Boot script\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\DA\00\00\00\00# This is a boot script for U-Boot</span><br><span class="hljs-string"># Generate boot.scr:</span><br><span class="hljs-string"># mkimage -c none -A arm -T script -d boot.cmd.default boot.scr</span><br><span class="hljs-string">#</span><br><span class="hljs-string">################</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">for boot_target in $&#123;boot_targets&#125;;</span><br><span class="hljs-string">do</span><br><span class="hljs-string">echo &quot;Trying to load boot images from $&#123;boot_target&#125;&quot;</span><br><span class="hljs-string">if test &quot;$&#123;boot_target&#125;&quot; = &quot;jtag&quot; ; then</span><br><span class="hljs-string">booti 0x00200000 0x04000000 0x00100000</span><br><span class="hljs-string">fi</span><br><span class="hljs-string">if test &quot;$&#123;boot_target&#125;&quot; = &quot;mmc0&quot; || test &quot;$&#123;boot_target&#125;&quot; = &quot;mmc1&quot; ; then</span><br><span class="hljs-string">if test -e $&#123;devtype&#125; $&#123;devnum&#125;:$&#123;distro_bootpart&#125; /uEnv.txt; then</span><br><span class="hljs-string">fatload $&#123;devtype&#125; $&#123;devnum&#125;:$&#123;distro_bootpart&#125; 0x00200000 uEnv.txt;</span><br><span class="hljs-string">echo &quot;Importing environment(uEnv.txt) from $&#123;boot_target&#125;...&quot;</span><br><span class="hljs-string">env import -t 0x00200000 $filesize</span><br><span class="hljs-string">if test -n $uenvcmd; then</span><br><span class="hljs-string">echo &quot;Running uenvcmd ...&quot;;</span><br><span class="hljs-string">run uenvcmd;</span><br><span class="hljs-string">fi</span><br><span class="hljs-string">fi</span><br><span class="hljs-string">if test -e $&#123;devtype&#125; $&#123;devnum&#125;:$&#123;distro_bootpart&#125; /image.ub; then</span><br><span class="hljs-string">fatload $&#123;devtype&#125; $&#123;devnum&#125;:$&#123;distro_bootpart&#125; 0x10000000 image.ub;</span><br><span class="hljs-string">bootm 0x10000000;</span><br><span class="hljs-string">                fi</span><br><span class="hljs-string">if test -e $&#123;devtype&#125; $&#123;devnum&#125;:$&#123;distro_bootpart&#125; /Image; then</span><br><span class="hljs-string">fatload $&#123;devtype&#125; $&#123;devnum&#125;:$&#123;distro_bootpart&#125; 0x00200000 Image;;</span><br><span class="hljs-string">fi</span><br><span class="hljs-string">if test -e $&#123;devtype&#125; $&#123;devnum&#125;:$&#123;distro_bootpart&#125; /system.dtb; then</span><br><span class="hljs-string">fatload $&#123;devtype&#125; $&#123;devnum&#125;:$&#123;distro_bootpart&#125; 0x00100000 system.dtb;</span><br><span class="hljs-string">fi</span><br><span class="hljs-string">if test -e $&#123;devtype&#125; $&#123;devnum&#125;:$&#123;distro_bootpart&#125; /ramdisk.cpio.gz.u-boot &amp;&amp; test &quot;$&#123;skip_tinyramdisk&#125;&quot; != &quot;yes&quot;; then</span><br><span class="hljs-string">fatload $&#123;devtype&#125; $&#123;devnum&#125;:$&#123;distro_bootpart&#125; 0x04000000 ramdisk.cpio.gz.u-boot;</span><br><span class="hljs-string">booti 0x00200000 0x04000000 0x00100000</span><br><span class="hljs-string">fi</span><br><span class="hljs-string">if test -e $&#123;devtype&#125; $&#123;devnum&#125;:$&#123;distro_bootpart&#125; /rootfs.cpio.gz.u-boot &amp;&amp; test &quot;$&#123;skip_ramdisk&#125;&quot; != &quot;yes&quot;; then</span><br><span class="hljs-string">fatload $&#123;devtype&#125; $&#123;devnum&#125;:$&#123;distro_bootpart&#125; 0x04000000 rootfs.cpio.gz.u-boot;</span><br><span class="hljs-string">booti 0x00200000 0x04000000 0x00100000</span><br><span class="hljs-string">fi</span><br><span class="hljs-string">booti 0x00200000 - 0x00100000</span><br><span class="hljs-string">fi</span><br><span class="hljs-string">if test &quot;$&#123;boot_target&#125;&quot; = &quot;xspi0&quot; || test &quot;$&#123;boot_target&#125;&quot; = &quot;qspi&quot; || test &quot;$&#123;boot_target&#125;&quot; = &quot;qspi0&quot;; then</span><br><span class="hljs-string">sf probe 0 0 0;</span><br><span class="hljs-string">sf read 0x10000000 0xF40000 0x6400000</span><br><span class="hljs-string">bootm 0x10000000;</span><br><span class="hljs-string">echo &quot;Booting using Fit image failed&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">sf read 0x00200000 0xF00000 0x1D00000</span><br><span class="hljs-string">sf read 0x04000000 0x4000000 0x4000000</span><br><span class="hljs-string">booti 0x00200000 0x04000000 0x00100000;</span><br><span class="hljs-string">echo &quot;Booting using Separate images failed&quot;</span><br><span class="hljs-string">fi</span><br><span class="hljs-string">if test &quot;$&#123;boot_target&#125;&quot; = &quot;nand&quot; || test &quot;$&#123;boot_target&#125;&quot; = &quot;nand0&quot;; then</span><br><span class="hljs-string">nand info;</span><br><span class="hljs-string">nand read 0x10000000 0x4180000 0x6400000</span><br><span class="hljs-string">bootm 0x10000000;</span><br><span class="hljs-string">echo &quot;Booting using Fit image failed&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">nand read 0x00200000 0x4100000 0x3200000</span><br><span class="hljs-string">nand read 0x04000000 0x7800000 0x3200000</span><br><span class="hljs-string">booti 0x00200000 0x04000000 0x00100000;</span><br><span class="hljs-string">echo &quot;Booting using Separate images failed&quot;</span><br><span class="hljs-string">fi</span><br><span class="hljs-string">done</span><br></code></pre></td></tr></table></figure><h2 id="petalinux-2022-2编译工程，显示bitbake版本不兼容-2"><a href="#petalinux-2022-2编译工程，显示bitbake版本不兼容-2" class="headerlink" title="petalinux 2022.2编译工程，显示bitbake版本不兼容[2]"></a>petalinux 2022.2编译工程，显示bitbake版本不兼容<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[PetaLinux Yocto Tips - Xilinx Wiki - Confluence (atlassian.net)](https://xilinx-wiki.atlassian.net/wiki/spaces/A/pages/18842475/PetaLinux+Yocto+Tips) Yocto相关使用">[2]</span></a></sup></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$PETALINUX</span>/components/yocto/buildtools/sysroots/x86_64-petalinux-linux/usr/bin/python3 ./components/yocto/layers/core/scripts/contrib/convert-overrides.py ./project-spec/meta-user/<br></code></pre></td></tr></table></figure><p>错误<sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Linux AXI Ethernet driver - Xilinx Wiki - Confluence (atlassian.net)](https://xilinx-wiki.atlassian.net/wiki/spaces/A/pages/18842485/Linux+AXI+Ethernet+driver) Xlinx-AXI-Ethernet-driver相关说明">[5]</span></a></sup></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[   52.763091] alloc_netdev: Unable to allocate device with zero queues<br>[   52.793075] xilinx_axienet: probe of a0010000.ethernet failed with error -12<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">25g-3-6$ petalinux-config --get-hw-description eth25g_wrapper.xsa<br>[INFO] Sourcing buildtools<br>INFO: Getting hardware description...<br>INFO: Renaming eth25g_wrapper.xsa to system.xsa<br>[INFO] Generating Kconfig <span class="hljs-keyword">for</span> project<br>ERROR: Failed to generate /home/pdc/00-petalinux-workspace/25g-3-6/build/misc/config/Kconfig.syshw<br>ERROR: Failed to Kconfig project<br>ERROR: Failed to generate System hardware Kconfig file.<br></code></pre></td></tr></table></figure><p>解决方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install libtinfo5<br></code></pre></td></tr></table></figure><h2 id="ERROR-x2F-dev"><a href="#ERROR-x2F-dev" class="headerlink" title="ERROR &#x2F;dev "></a>ERROR &#x2F;dev <a name="dev"/></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ERROR: There<span class="hljs-string">&#x27;s no &#x27;</span>/dev<span class="hljs-string">&#x27; on rootfs</span><br></code></pre></td></tr></table></figure><p><a href="https://support.xilinx.com/s/question/0D52E00006hprw1SAA/error-theres-no-dev-on-rootfs?language=en_US">ERROR: There’s no ‘&#x2F;dev’ on rootfs (xilinx.com)</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">petalinux-config -&gt; Image packaging configuration -&gt; INITRAMFS/INITRD Image name -&gt; petalinux-image-minimal<br></code></pre></td></tr></table></figure><h2 id="指定源码路径"><a href="#指定源码路径" class="headerlink" title="指定源码路径"></a>指定源码路径</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> substitute-path &lt;当前搜索路径&gt; &lt;指的搜索路径&gt;<br><span class="hljs-built_in">set</span> substitute-path /usr/src/kernel /opt/linux-xlnx-xilinx-v2021.1<br></code></pre></td></tr></table></figure><h2 id="打包BOOT-BIN出现Section-image-ub-0-offset-of-0x242C0-overlaps-with-prior-section-end-address-of-242C0C0"><a href="#打包BOOT-BIN出现Section-image-ub-0-offset-of-0x242C0-overlaps-with-prior-section-end-address-of-242C0C0" class="headerlink" title="打包BOOT.BIN出现Section image.ub.0 offset of 0x242C0 overlaps with prior section end address of 242C0C0"></a>打包<code>BOOT.BIN</code>出现<code>Section image.ub.0 offset of 0x242C0 overlaps with prior section end address of 242C0C0</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">***** Xilinx Bootgen v2021.1<br>  **** Build <span class="hljs-built_in">date</span> : May 28 2021-21:36:22<br>    ** Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.<br><br>[ERROR]  : Section image.ub.0 offset of 0x242C0 overlaps with prior section end address of 242C0C0<br>ERROR: Fail to create BOOT image<br></code></pre></td></tr></table></figure><p>指定<code>kernel</code>的<code>offset</code>地址:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">petalinux-package --boot --format BIN --kernel --offset 0x0242d000 --fsbl --u-boot --pmufw --fpga ./images/linux/design_1_wrapper.bit --force<br></code></pre></td></tr></table></figure><h2 id="qspi启动后无法自动跳转至kernel"><a href="#qspi启动后无法自动跳转至kernel" class="headerlink" title="qspi启动后无法自动跳转至kernel"></a><code>qspi</code>启动后无法自动跳转至<code>kernel</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#flash读取至ddr    目的地址   kernel源地址   长度</span><br><span class="hljs-variable">$zynqMP</span>:sf <span class="hljs-built_in">read</span> 0x80000000 0x0242d000 0x2800000<br><br><span class="hljs-variable">$zynqMP</span>:booti 0x80000000<br></code></pre></td></tr></table></figure><h2 id="fit-image"><a href="#fit-image" class="headerlink" title="fit image"></a>fit image</h2><p><img src="/image/petalinux/image-20230516202406387.png" alt="image-20230516202406387"></p><p>在 Petalinux 配置中，QSPI&#x2F;OSPI FIT 映像是指在 QSPI&#x2F;OSPI NOR Flash 上存储的 FIT 映像。FIT 映像是一种灵活的引导映像格式，可以包含多个镜像文件（如内核、设备树、文件系统等），并且可以根据需要进行配置。</p><p>根据上述文件在uboot阶段可以使用以下代码启动<code>kernel</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$zynqMP</span>:sf <span class="hljs-built_in">read</span> 0x10000000 0xF40000 0x6400000<br><span class="hljs-variable">$zynqMP</span>:bootm 0x10000000<br></code></pre></td></tr></table></figure><h1 id="如何修改设备树-3"><a href="#如何修改设备树-3" class="headerlink" title="如何修改设备树[3]"></a>如何修改设备树<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Xilinx Petalinux工程设备树介绍](https://support.xilinx.com/s/article/1197597?language=zh_CN)">[3]</span></a></sup></h1><h2 id="基于自动生成的设备树，添加或修改节点"><a href="#基于自动生成的设备树，添加或修改节点" class="headerlink" title="基于自动生成的设备树，添加或修改节点"></a>基于自动生成的设备树，添加或修改节点</h2><p>通过修改<code>./project-spec/meta-user/recipes-bsp/device-tree/files/system-user.dtsi</code>，来实现对之前已经定义的设备树节点中的属性进行变更，也可以添加没有自动生成的设备树节点。</p><p>设备树语法可参考 《devicetree-specification.pdf》<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Releases · devicetree-org/devicetree-specification (github.com)](https://github.com/devicetree-org/devicetree-specification/releases?page=2)">[4]</span></a></sup></p><p>设备树更改完成后需要执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">petalinux-build -c device-tree -x cleansstate<br>生成pl.dtsi<br>petalinux-config -c device-tree<br>petalinux-build -c device-tree<br></code></pre></td></tr></table></figure><h2 id="设备树反编译"><a href="#设备树反编译" class="headerlink" title="设备树反编译"></a>设备树反编译</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> &lt;plnx-proj-root&gt;/images/linux/<br>../../build/tmp/sysroots-components/x86_64/dtc-native/usr/bin/dtc -I dtb -O dts -o system.dts system.dtb<br></code></pre></td></tr></table></figure><h1 id="手册"><a href="#手册" class="headerlink" title="手册"></a>手册</h1><p>PG332 ERNIC 手册</p><p>PG203 CMAC 手册</p><p>PG210 25G AXI Ethernet 手册</p><p>PG021 AXI-DMA手册</p><p>PG288 MCDMA手册</p><p>UG1085-Zynq-Ultrascale-trm 手册 250 SoC芯片手册</p><p><a href="https://www.xilinx.com/htmldocs/registers/ug1087/ug1087-zynq-ultrascale-registers.html">Zynq UltraScale+ Devices Register Reference (xilinx.com)</a> ug1085-Zynq-Ultrascale寄存器手册</p><p>UG1144 Petalinux Tools手册</p><p>错误</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">RROR: perftest-1.0-r0 do_compile: oe_runmake failed<br>ERROR: perftest-1.0-r0 do_compile: Execution of <span class="hljs-string">&#x27;/home/dpu/zjzhe/250soc_ernic/build/tmp/work/cortexa72-cortexa53-xilinx-linux/perftest/1.0-r0/temp/run.do_compile.180753&#x27;</span> failed with <span class="hljs-built_in">exit</span> code 1:<br>make  all-am<br>make[1]: Entering directory <span class="hljs-string">&#x27;/home/dpu/zjzhe/250soc_ernic/build/tmp/work/cortexa72-cortexa53-xilinx-linux/perftest/1.0-r0/git&#x27;</span><br>make[1]: *** No rule to make target <span class="hljs-string">&#x27;../../../umm/1.0-r0/libumm.so&#x27;</span>, needed by <span class="hljs-string">&#x27;libperftest.a&#x27;</span>.  Stop.<br><br></code></pre></td></tr></table></figure><p>解决方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">dpu@dpu-PC:~/zjzhe/250soc_ernic/build/tmp/work/cortexa72-cortexa53-xilinx-linux/perftest/1.0-r0/git$ find ..// -name <span class="hljs-string">&quot;libumm*&quot;</span><br>..//recipe-sysroot/usr/lib/libumm.so.1.0<br>..//recipe-sysroot/usr/lib/libumm.so.1<br>..//recipe-sysroot/usr/lib/libumm.so<br>dpu@dpu-PC:~/zjzhe/250soc_ernic/build/tmp/work/cortexa72-cortexa53-xilinx-linux/perftest/1.0-r0$ <span class="hljs-built_in">ln</span> -s ./recipe-sysroot/usr/lib/libumm.so ../../umm/1.0-r0/libumm.so<br><br></code></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.zynqnotes.com/pl-ps-interrupt">中断（一）：让 Linux 接收来自 PL 的自定义中断信号 (zynqnotes.com)</a> zynqMP PL2PS、PS2PL设备树中断配置</p><p><a href="https://docs.xilinx.com/">主页 • 文档门户 (xilinx.com)</a> Xlinx 文档下载</p><p><a href="https://github.com/Xilinx/u-boot-xlnx">Xilinx&#x2F;u-boot-xlnx: The official Xilinx u-boot repository (github.com)</a> xlinx维护的uboot</p><p><a href="https://github.com/Xilinx/linux-xlnx">Xilinx&#x2F;linux-xlnx: The official Linux kernel from Xilinx (github.com)</a> xlinx维护的linux</p><p><a href="https://zhuanlan.zhihu.com/p/478422063">Petalinux2020.2 开发ZYNQ的AXI DMA - 知乎 (zhihu.com)</a> petalinux创建modules</p><p><a href="https://www.cnblogs.com/schips/p/xilinx-petalinux-common-commands.html">PetaLinux常用命令汇总 - schips - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/u011529140/article/details/70800460"> petalinux-package qspi启动镜像的问题_uimage_offset_边城1987的博客-CSDN博客</a></p><p><a href="https://support.xilinx.com/s/question/0D52E00006hpeRTSAY/petalinuxpackage-boot-add-offset-doesnt-work-as-before?language=en_US">petalinux-package –boot –add –offset doesn’t work as before (xilinx.com)</a></p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://wiki.trenz-electronic.de/display/PD/PetaLinux">PetaLinux - Public Docs - Trenz Electronic Wiki (trenz-electronic.de)</a> petalinux工程创建等使用<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://xilinx-wiki.atlassian.net/wiki/spaces/A/pages/18842475/PetaLinux+Yocto+Tips">PetaLinux Yocto Tips - Xilinx Wiki - Confluence (atlassian.net)</a> Yocto相关使用<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://support.xilinx.com/s/article/1197597?language=zh_CN">Xilinx Petalinux工程设备树介绍</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://github.com/devicetree-org/devicetree-specification/releases?page=2">Releases · devicetree-org&#x2F;devicetree-specification (github.com)</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://xilinx-wiki.atlassian.net/wiki/spaces/A/pages/18842485/Linux+AXI+Ethernet+driver">Linux AXI Ethernet driver - Xilinx Wiki - Confluence (atlassian.net)</a> Xlinx-AXI-Ethernet-driver相关说明<a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span><a href="https://blog.csdn.net/baidu_37503452/article/details/80106440">petalinux调试内核_StarLish0715的博客-CSDN博客</a><a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>petalinux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>petalinux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式基础</title>
    <link href="/2023/06/12/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/06/12/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p><strong>正则表达式</strong>是一种用于匹配和操作文本的强大工具，它是由一系列字符和特殊字符组成的模式，用于描述要匹配的文本模式。</p><p>正则表达式可以在文本中查找、替换、提取和验证特定的模式。</p><h3 id="命令行展开"><a href="#命令行展开" class="headerlink" title="命令行展开"></a>命令行展开</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">eddy@DESKTOP-KTLF3P4:~$ <span class="hljs-built_in">echo</span> <span class="hljs-built_in">ls</span>&#123;0..20&#125;<br>ls0 ls1 ls2 ls3 ls4 ls5 ls6 ls7 ls8 ls9 ls10 ls11 ls12 ls13 ls14 ls15 ls16 ls17 ls18 ls19 ls20<br>eddy@DESKTOP-KTLF3P4:~$ <span class="hljs-built_in">echo</span> <span class="hljs-built_in">pwd</span>&#123;1..20..2&#125;<br>pwd1 pwd3 pwd5 pwd7 pwd9 pwd11 pwd13 pwd15 pwd17 pwd19<br>eddy@DESKTOP-KTLF3P4:~$ <span class="hljs-built_in">echo</span> <span class="hljs-built_in">pwd</span>&#123;01..20..2&#125;<br>pwd01 pwd03 pwd05 pwd07 pwd09 pwd11 pwd13 pwd15 pwd17 pwd19<br>eddy@DESKTOP-KTLF3P4:~$<br></code></pre></td></tr></table></figure><h3 id="命令别名"><a href="#命令别名" class="headerlink" title="命令别名"></a>命令别名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">alias</span>, <span class="hljs-built_in">unalias</span><br>eddy@DESKTOP-KTLF3P4:~$ <span class="hljs-built_in">alias</span> <span class="hljs-built_in">rm</span>=<span class="hljs-string">&#x27;rm -i&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="命令历史"><a href="#命令历史" class="headerlink" title="命令历史"></a>命令历史</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">history</span><br>!&lt;行号&gt;  <span class="hljs-comment">#执行history中第&lt;&gt;条命令</span><br>!! <span class="hljs-comment">#执行上次命令</span><br></code></pre></td></tr></table></figure><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">ctrl + a<span class="hljs-comment">#移动到命令行首</span><br>ctrl + e<span class="hljs-comment">#移动到命令行尾</span><br>ctrl + k<span class="hljs-comment">#删除光标后的字符</span><br>ctrl + u<span class="hljs-comment">#删除光标前的内容</span><br></code></pre></td></tr></table></figure><h3 id="查询命令位置"><a href="#查询命令位置" class="headerlink" title="查询命令位置"></a>查询命令位置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">which</span> <span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><h1 id="Linux正则表达式（Regular-Expression，REGEXP）"><a href="#Linux正则表达式（Regular-Expression，REGEXP）" class="headerlink" title="Linux正则表达式（Regular Expression，REGEXP）"></a>Linux正则表达式（Regular Expression，REGEXP）</h1><ul><li>grep：文本过滤工具，（模式：pattern）</li><li>sed：stream editor，流编辑器；文本编辑器</li><li>awk：Linux的文本报告生成器（格式化文本），Linux中是gawk</li></ul><h2 id="正则表达式的分类"><a href="#正则表达式的分类" class="headerlink" title="正则表达式的分类"></a>正则表达式的分类</h2><ul><li>基本正则表达式（BRE，basic regular exporession）</li></ul><blockquote><p>BRE对应的字符有 ^ $ . [] *</p></blockquote><ul><li>扩展正则表达式（ERE，extended regular expression）</li></ul><blockquote><p>ERE在BRE的基础上增加 () {} ? + | 等字符</p></blockquote><h3 id="基本正则表达式BRE集合"><a href="#基本正则表达式BRE集合" class="headerlink" title="基本正则表达式BRE集合"></a>基本正则表达式BRE集合</h3><ul><li>匹配字符</li><li>匹配次数</li><li>位置锚定</li></ul><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>^</td><td>尖角号，用于模式的最左侧，如”^oldboy”，匹配oldboy单词开头的行</td></tr><tr><td>$</td><td>美元符，用于模式的最右侧，如”oldboy$”，表示以oldboy单词结尾的行</td></tr><tr><td>^$</td><td>组合符，表示空行</td></tr><tr><td>.</td><td>匹配任意一个有且只有一个字符，不能匹配空行</td></tr><tr><td>\</td><td>转义字符，让特殊含义的字符还原本意，例如<code>\.</code>表示小数点</td></tr><tr><td>*</td><td>匹配前一个字符（连续出现）0次或1次以上，重复0次代表空，即匹配所有内容</td></tr><tr><td>.*</td><td>组合符，匹配所有内容</td></tr><tr><td>^.*</td><td>组合符，匹配任意多个字符开头的内容</td></tr><tr><td>.*$</td><td>组合符，匹配任意多个字符结尾的内容</td></tr><tr><td>[abc]</td><td>匹配[]内的任意一个字符，a或b或c，可以写为[a-c]</td></tr><tr><td>[^abc]</td><td>匹配除了^后面的任意字符，a或b或c，^表示对[abc]的取反</td></tr></tbody></table><h3 id="扩展正则表达式ERE集合"><a href="#扩展正则表达式ERE集合" class="headerlink" title="扩展正则表达式ERE集合"></a>扩展正则表达式ERE集合</h3><p>扩展正则表达式必须用<code>grep -E</code>才能生效</p><table><thead><tr><th>字符</th><th>作用</th></tr></thead><tbody><tr><td>+</td><td>匹配前一个字符一次或多次</td></tr><tr><td>[:&#x2F;]+</td><td>匹配<code>[]</code>内的”:”或者”&#x2F;“字符一次或多次</td></tr><tr><td>?</td><td>匹配前一个字符0次或一次</td></tr><tr><td>|</td><td>表示<code>或</code>，同时过滤多个字符串</td></tr><tr><td>()</td><td>分组过滤，被括起来的内容表示一个整体</td></tr><tr><td>a{n,m}</td><td>匹配前一个字符最少<code>n</code>次，最多<code>m</code>次</td></tr><tr><td>a{n,}</td><td>匹配前一个字符最少n次</td></tr><tr><td>a{n}</td><td>匹配前一个字符正好n次</td></tr><tr><td>a{,m}</td><td>匹配前一个字符最多m次</td></tr></tbody></table><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://tool.oschina.net/uploads/apidocs/jquery/regexp.html">表达式全集</a></p>]]></content>
    
    
    <categories>
      
      <category>正则表达式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>正则表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
