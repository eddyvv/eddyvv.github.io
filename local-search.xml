<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>PetaLinux常用操作</title>
    <link href="/2023/06/12/PetaLinux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <url>/2023/06/12/PetaLinux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="安装petalinux2022-2"><a href="#安装petalinux2022-2" class="headerlink" title="安装petalinux2022.2"></a>安装petalinux2022.2</h1><ol><li>安装依赖包</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install iproute2 gawk python3 python build-essential gcc git make net-tools libncurses5-dev tftpd zlib1g-dev libssl-dev flex bison libselinux1 gnupg wget git-core diffstat chrpath socat xterm autoconf libtool tar unzip texinfo zlib1g-dev gcc-multilib automake zlib1g:i386 screen pax gzip cpio python3-pip python3-pexpect xz-utils debianutils iputils-ping python3-git python3-jinja2 libegl1-mesa libsdl1.2-dev pylint3 libtinfo5<br></code></pre></td></tr></table></figure><ol start="2"><li>更改文件夹权限</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mkdir</span> petalinux2022.2<br>sudo <span class="hljs-built_in">chmod</span> 777 petalinux2022 ./<br></code></pre></td></tr></table></figure><ol start="3"><li>下载<code>petalinux2022.2</code>安装包</li></ol><p>地址：<a href="https://www.xilinx.com/support/download/index.html/content/xilinx/en/downloadNav/embedded-design-tools.html">Downloads (xilinx.com)</a></p><ol start="4"><li>更改默认shell</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash<br></code></pre></td></tr></table></figure><ol start="5"><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./petalinux-v2022.2-10141622-installer.run -d ./petalinux2022.2<br></code></pre></td></tr></table></figure><p>安装过程需要同意许可信息，输入三次y。</p><h1 id="qemu启动"><a href="#qemu启动" class="headerlink" title="qemu启动"></a>qemu启动</h1><p>参考《ug1144-petalinux-tools-reference-guide.pdf》</p><h2 id="1-生成-BIN镜象"><a href="#1-生成-BIN镜象" class="headerlink" title="1. 生成.BIN镜象"></a>1. 生成.BIN镜象</h2><p>粘贴相应的<code>.bit</code>至<code>plnx-proj-root/images/linux/</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> &lt;plnx-proj-root&gt;<br>petalinux-package --boot --format BIN --fsbl --u-boot --pmufw --fpga ./images/linux/design_1_wrapper.bit --force<br></code></pre></td></tr></table></figure><h2 id="2-封装预构建镜像"><a href="#2-封装预构建镜像" class="headerlink" title="2. 封装预构建镜像"></a>2. 封装预构建镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">petalinux-package --prebuilt --fpga ./images/linux/design_1_wrapper.bit --force<br></code></pre></td></tr></table></figure><h2 id="3-启动qemu"><a href="#3-启动qemu" class="headerlink" title="3. 启动qemu"></a>3. 启动qemu</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">petalinux-boot --qemu --prebuilt 3<br></code></pre></td></tr></table></figure><p>注意：若使用<code>petalinux2021</code>启动qemu需要在xilinx官网下载某个版本的<code>.bsp</code>，将其中的<code>pmu_rom_qemu_sha3.elf</code> 拷贝到<code>&lt;plnx-proj-root&gt;/pre-built/linux/images</code>下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">eddy@eddy:~/code/test$ petalinux-boot --qemu --prebuilt 3<br>[INFO] Sourcing buildtools<br>INFO: No DTB has been specified, use the default one <span class="hljs-string">&quot;/home/eddy/code/test/pre-built/linux/images/system.dtb&quot;</span>.<br>INFO: No DTB has been specified, use the default one <span class="hljs-string">&quot;/home/eddy/code/test/pre-built/linux/images/system.dtb&quot;</span>.<br>INFO: Starting microblaze QEMU<br>INFO: Starting the above QEMU <span class="hljs-built_in">command</span> <span class="hljs-keyword">in</span> the background<br>INFO:  qemu-system-microblazeel -M microblaze-fdt   -serial mon:stdio -serial /dev/null -display none -kernel /home/eddy/code/test/pre-built/linux/images/pmu_rom_qemu_sha3.elf -device loader,file=/home/eddy/code/test/pre-built/linux/images/pmufw.elf      -hw-dtb /home/eddy/code/test/pre-built/linux/images/zynqmp-qemu-multiarch-pmu.dtb -machine-path /tmp/tmp.zRXyRZk5bx -device loader,addr=0xfd1a0074,data=0x1011003,data-len=4 -device loader,addr=0xfd1a007C,data=0x1010f03,data-len=4<br>qemu-system-microblazeel: Failed to connect socket /tmp/tmp.zRXyRZk5bx/qemu-rport-_pmu@0: No such file or directory<br>qemu-system-microblazeel: info: QEMU waiting <span class="hljs-keyword">for</span> connection on: disconnected:unix:/tmp/tmp.zRXyRZk5bx/qemu-rport-_pmu@0,server<br>INFO: TCP PORT is free<br>INFO: Starting aarch64 QEMU<br>INFO:  qemu-system-aarch64 -M arm-generic-fdt   -serial /dev/null -serial mon:stdio -display none -device loader,file=/home/eddy/code/test/pre-built/linux/images/bl31.elf,cpu-num=0 -device loader,file=/home/eddy/code/test/pre-built/linux/images/rootfs.cpio.gz.u-boot,addr=0x04000000,force-raw -device loader,file=/home/eddy/code/test/pre-built/linux/images/u-boot.elf -device loader,file=/home/eddy/code/test/pre-built/linux/images/Image,addr=0x00200000,force-raw -device loader,file=/home/eddy/code/test/pre-built/linux/images/system.dtb,addr=0x00100000,force-raw -device loader,file=/home/eddy/code/test/pre-built/linux/images/boot.scr,addr=0x20000000,force-raw -gdb tcp::9000   -net nic,netdev=eth0 -netdev user,<span class="hljs-built_in">id</span>=eth0,tftp=/tftpboot -net nic -net nic -net nic -net nic   -hw-dtb /home/eddy/code/test/pre-built/linux/images/zynqmp-qemu-multiarch-arm.dtb -machine-path /tmp/tmp.zRXyRZk5bx -global xlnx,zynqmp-boot.cpu-num=0 -global xlnx,zynqmp-boot.use-pmufw=<span class="hljs-literal">true</span>   -m 4G<br>QEMU 5.1.0 monitor - <span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;help&#x27;</span> <span class="hljs-keyword">for</span> more information<br>(qemu) qemu-system-aarch64: warning: hub port hub0port3 has no peer<br>qemu-system-aarch64: warning: hub 0 is not connected to host network<br>qemu-system-aarch64: warning: netdev hub0port3 has no peer<br>qemu-system-aarch64: warning: requested NIC (__org.qemu.net4, model unspecified) was not created (not supported by this machine?)<br>PMU Firmware 2021.1Jun  6 2021   07:07:32<br>PMU_ROM Version: xpbr-v8.1.0-0<br>NOTICE:  ATF running on XCZUUNKN/QEMU v4/RTL0.0 at 0xfffea000<br>NOTICE:  BL31: v2.4(release):xlnx_rebase_v2.4_2021.1_update1<br>NOTICE:  BL31: Built : 08:27:07, Apr 28 2021<br><br></code></pre></td></tr></table></figure><h2 id="打包BSP"><a href="#打包BSP" class="headerlink" title="打包BSP"></a>打包BSP</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">petalinux-package --bsp -p 2021-25-mcdma/ --hwsource eth_25g_2021-3-8/ -o 2021-25-mcdma.bsp --force<br></code></pre></td></tr></table></figure><p><code>psu_init</code> 是FSBL中的一个函数，用于初始化PS端</p><h1 id="petalinux-qemu-调试linux内核"><a href="#petalinux-qemu-调试linux内核" class="headerlink" title="petalinux qemu 调试linux内核"></a>petalinux qemu 调试linux内核</h1><ol><li><p>启动<code>qemu</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">petalinux-boot --qemu --prebuilt 3<br></code></pre></td></tr></table></figure></li><li><p>进入<code>&lt;plnx-proj-root&gt;image/linux</code>文件夹</p></li><li><p>进行<code>gdb</code>调试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash'">petalinux-util --gdb vmlinux<br></code></pre></td></tr></table></figure></li></ol><p><a href="https://wenfh2020.com/2021/05/19/gdb-kernel-networking/">gdb 调试 Linux 内核网络源码（附视频） (wenfh2020.com)</a></p><h2 id="调试步骤-6"><a href="#调试步骤-6" class="headerlink" title="调试步骤[6]"></a>调试步骤<sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="[petalinux调试内核_StarLish0715的博客-CSDN博客](https://blog.csdn.net/baidu_37503452/article/details/80106440)">[6]</span></a></sup></h2><p>可参考《ug1144-petalinux-tools-reference-guide.pdf》 Debugging节</p><ol><li><p>启动qemu</p></li><li><p>执行gdb调试命令</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">petalinux-util --gdb vmlinux<br></code></pre></td></tr></table></figure><h1 id="创建zynqMP自定义工程-1"><a href="#创建zynqMP自定义工程-1" class="headerlink" title="创建zynqMP自定义工程[1]"></a>创建<code>zynqMP</code>自定义工程<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[PetaLinux - Public Docs - Trenz Electronic Wiki (trenz-electronic.de)](https://wiki.trenz-electronic.de/display/PD/PetaLinux) petalinux工程创建等使用">[1]</span></a></sup></h1><h2 id="创建-xsa文件"><a href="#创建-xsa文件" class="headerlink" title="创建.xsa文件"></a>创建<code>.xsa</code>文件</h2><p>使用<code>Vivado</code>创建工程并生成<code>xsa</code>文件</p><h2 id="创建自定义工程"><a href="#创建自定义工程" class="headerlink" title="创建自定义工程"></a>创建自定义工程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">petalinux-create -t project --template zynqMP --name &lt;name&gt;<br></code></pre></td></tr></table></figure><h2 id="工程配置"><a href="#工程配置" class="headerlink" title="工程配置"></a>工程配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> &lt;plnx-proj-root&gt;<br>petalinux-config --get-hw-description &lt;name&gt;.xsa<br><br>petalinux-config<br><span class="hljs-comment">#默认配置</span><br><br>petalinux-config -c kernel<br><span class="hljs-comment">#配置内核</span><br><br>petalinux-config -c rootfs<br><span class="hljs-comment">#配置文件系统</span><br><br>petalinux-config -c u-boot<br><span class="hljs-comment">#配置u-boot</span><br></code></pre></td></tr></table></figure><p>对构建的工程进行实际的配置</p><h3 id="配置启动地址信息"><a href="#配置启动地址信息" class="headerlink" title="配置启动地址信息"></a>配置启动地址信息</h3><p>进入<code>u-boot Configuration  ---&gt;</code> <code>u-boot script configuration  ---&gt;</code>根据启动方式以及各文件大小进行配置。</p><p><img src="/image/petalinux/image-20230516202016744.png" alt="image-20230516202016744"></p><h2 id="工程编译"><a href="#工程编译" class="headerlink" title="工程编译"></a>工程编译</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> &lt;plnx-proj-root&gt;<br>petalinux-build<br><span class="hljs-comment">#整个工程编译，编译后生成image.ub</span><br><br>petalinux-build -c kernel<br><span class="hljs-comment">#编译内核</span><br><br>petalinux-build -c rootfs<br><span class="hljs-comment">#编译文件系统</span><br><br>petalinux-build -c u-boot<br><span class="hljs-comment">#编译u-boot</span><br><br>petalinux-build -x distclean<br><span class="hljs-comment">#清空编译后产生的临时文件和下载的sstate cache文件</span><br><br>petalinux-build -x mrproper<br><span class="hljs-comment">#清空所有的临时文件，&lt;PROJECT&gt;/images/,  &lt;PROJECT&gt;/build/  and &lt;PROJECT&gt;/components/plnx_workspace/ directories</span><br><br><br><span class="hljs-string">&quot;petalinux-build -x package&quot;</span> 是 PetaLinux 工具的命令，它用于构建 PetaLinux 项目。PetaLinux 是一个用于嵌入式设备的 Linux 发行版，由 Xilinx 公司开发。PetaLinux 提供了一些工具和命令，用于构建、调试和定制 Linux 系统。其中 <span class="hljs-string">&quot;petalinux-build&quot;</span> 就是用于构建 PetaLinux 项目的命令，而 <span class="hljs-string">&quot;-x package&quot;</span> 则表示只构建指定的软件包。<br><br><span class="hljs-comment">#打包到image.ub</span><br><br>petalinux-build -c mymodule -x do_cleansstate<br><span class="hljs-comment">#清除用户模块</span><br></code></pre></td></tr></table></figure><h3 id="离线编译工程配置"><a href="#离线编译工程配置" class="headerlink" title="离线编译工程配置"></a>离线编译工程配置</h3><p>下载离线包<a href="https://www.xilinx.com/support/download/index.html/content/xilinx/en/downloadNav/embedded-design-tools/archive.html">Downloads (xilinx.com)</a></p><p><img src="/image/petalinux/image-20230516163136806.png" alt="image-20230516163136806"></p><p>下载上述两个压缩包。</p><p>当前环境为 petalinux2021.1 设备为<code>250soc</code> （xilinx ）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> &lt;plnx-proj-root&gt;<br>petalinux-config --get-hw-description &lt;name&gt;.xsa<br></code></pre></td></tr></table></figure><p>进入<code>Linux Components Selection</code>  —&gt; <code>u-boot（u-boot-xlinx）</code>以及<code>linux-kernel</code>均选择<code>ext-local-src</code>，配置离线编译包。</p><p><img src="/image/petalinux/image-20230516155842635.png" alt="image-20230516155842635"></p><p><img src="/image/petalinux/image-20230516160123087.png" alt="image-20230516160123087"></p><p><img src="/image/petalinux/image-20230516160222677.png" alt="image-20230516160222677"></p><p>进入<code>Subsystem AUTO Hardware Settings  ---&gt;</code> <code>Serial Settings  ---&gt;</code> 将串口均选择为<code>psu_uart_1</code></p><p><img src="/image/petalinux/image-20230516160245000.png" alt="image-20230516160245000"></p><p>原因是根据<code>.xsa</code>生成的设备树中将<code>uart1</code>配到了设备的<code>serial0</code>。</p><p><img src="/image/petalinux/image-20230516160555650.png" alt="image-20230516160555650"></p><p>若要使用<code>qemu</code>启动，此步骤可空过，若使用板子启动需要将这里的<code>INITRAMFS/INITRD Image name</code>更改为如下<code>petalinux-image-minimal</code>，若更改后使用qemu启动会出现<a href="#dev">ERROR &#x2F;dev</a>的错误。</p><p><img src="/image/petalinux/image-20230516160724405.png" alt="image-20230516160724405"></p><p>配置离线包</p><p>进入<code>Yocto Settings  ---&gt;</code> <code>Add pre-mirror url   ---&gt; </code> 更改为下载的离线包的位置</p><p><img src="/image/petalinux/image-20230516161519634.png" alt="image-20230516161519634"></p><p>注意：这里需要在最前面加上<code>file://</code>。</p><p>配置<code>sstate</code>：</p><p><img src="/image/petalinux/image-20230516161650342.png" alt="image-20230516161650342"></p><p>其他配置可根据情况修改。推出前需保存。</p><p>注意：若中途需要远程下载相应的app或者包文件，需要是能开启<code>Enable Network sstate feeds</code>。防止编译报错。</p><p>若存在<code>app</code>或<code>packages</code>，需要进入文件系统配置中添加相应的选项。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">petalinux-config -c rootfs<br></code></pre></td></tr></table></figure><p><img src="/image/petalinux/image-20230516161900744.png" alt="image-20230516161900744"></p><p>进入<code>build/conf</code>编辑<code>local.conf</code></p><p><img src="/image/petalinux/image-20230516163537432.png" alt="image-20230516163537432"></p><p>配置完成后若想加<code>app</code>或者<code>packages</code>，需要在<code>project-spec</code>对应的<code>mate-user</code>中添加自己的文件，或有现成的<code>mate-user</code>，直接将此文件夹进行替换即可。</p><p>配置完成后即可进行编译。</p><h2 id="创建自定义模块"><a href="#创建自定义模块" class="headerlink" title="创建自定义模块"></a>创建自定义模块</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> &lt;plnx-proj-root&gt;<br>petalinux-create -t modules --name &lt;user-module-name&gt; --<span class="hljs-built_in">enable</span><br><br>petalinux-create -t apps --template c --name myapp --<span class="hljs-built_in">enable</span><br></code></pre></td></tr></table></figure><h1 id="JTAG烧写"><a href="#JTAG烧写" class="headerlink" title="JTAG烧写"></a>JTAG烧写</h1><h2 id="tcl文件"><a href="#tcl文件" class="headerlink" title=".tcl文件"></a><code>.tcl</code>文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#connect</span><br>fpga -no-revision-check -f design_1_wrapper.bit<br>after 2000<br>targets -<span class="hljs-built_in">set</span> -filter &#123;name =~ <span class="hljs-string">&quot;PSU&quot;</span>&#125;<br>mask_write 0xFFCA0038 0x1C0 0x1C0<br>after 500<br><span class="hljs-comment">#Load and run PMUFW</span><br>targets -<span class="hljs-built_in">set</span> -filter &#123;name =~ <span class="hljs-string">&quot;MicroBlaze PMU&quot;</span>&#125;<br>dow pmu-firmware-250soc-zynqmp.elf<br>con<br>after 500<br><span class="hljs-comment">#Reset A53, load and run FSBL</span><br>targets -<span class="hljs-built_in">set</span> -filter &#123;name =~ <span class="hljs-string">&quot;PS8&quot;</span> || name =~ <span class="hljs-string">&quot;PSU&quot;</span>&#125;<br>mwr 0xffff0000 0x14000000;mask_write 0xFD1A0104 0x501 0x0<br>targets -<span class="hljs-built_in">set</span> -filter &#123;name =~ <span class="hljs-string">&quot;Cortex-A53 #0&quot;</span>&#125;<br><span class="hljs-built_in">source</span> psu_init.tcl<br>dow fsbl-250soc-zynqmp.elf<br>con<br><span class="hljs-comment">#Give FSBL time to run</span><br>after 5000<br>stop<br>psu_ps_pl_isolation_removal; psu_ps_pl_reset_config<br>after 500<br>dow u-boot.elf<br>after 500<br>dow arm-trusted-firmware.elf<br>after 500<br>con<br>after 2000<br>dow -data image.ub 0x8000000<br><br></code></pre></td></tr></table></figure><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="boot-src文件"><a href="#boot-src文件" class="headerlink" title="boot.src文件"></a><code>boot.src</code>文件</h2><p><code>boot.src</code> 文件是一个包含启动指令的文本文件，用于在 U-Boot 环境中设置启动选项和执行启动操作。该文件通常包含一些环境变量设置、内存和设备初始化、加载内核映像和设备树文件等操作。</p><p><code>connfig</code>文件启动地址信息相关配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#</span><br><span class="hljs-comment"># JTAG/DDR image offsets</span><br><span class="hljs-comment">#</span><br>CONFIG_SUBSYSTEM_UBOOT_DEVICETREE_OFFSET=0x100000<br>CONFIG_SUBSYSTEM_UBOOT_KERNEL_OFFSET=0x200000<br>CONFIG_SUBSYSTEM_UBOOT_RAMDISK_IMAGE_OFFSET=0x4000000<br>CONFIG_SUBSYSTEM_UBOOT_FIT_IMAGE_OFFSET=0x10000000<br><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># QSPI/OSPI image offsets</span><br><span class="hljs-comment">#</span><br>CONFIG_SUBSYSTEM_UBOOT_QSPI_KERNEL_OFFSET=0xF00000<br>CONFIG_SUBSYSTEM_UBOOT_QSPI_KERNEL_SIZE=0x1D00000<br>CONFIG_SUBSYSTEM_UBOOT_QSPI_RAMDISK_OFFSET=0x4000000<br>CONFIG_SUBSYSTEM_UBOOT_QSPI_RAMDISK_SIZE=0x4000000<br>CONFIG_SUBSYSTEM_UBOOT_QSPI_FIT_IMAGE_OFFSET=0xF40000<br>CONFIG_SUBSYSTEM_UBOOT_QSPI_FIT_IMAGE_SIZE=0x6400000<br><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># NAND image offsets</span><br><span class="hljs-comment">#</span><br>CONFIG_SUBSYSTEM_UBOOT_NAND_KERNEL_OFFSET=0x4100000<br>CONFIG_SUBSYSTEM_UBOOT_NAND_KERNEL_SIZE=0x3200000<br>CONFIG_SUBSYSTEM_UBOOT_NAND_RAMDISK_OFFSET=0x7800000<br>CONFIG_SUBSYSTEM_UBOOT_NAND_RAMDISK_SIZE=0x3200000<br>CONFIG_SUBSYSTEM_UBOOT_NAND_FIT_IMAGE_OFFSET=0x4180000<br>CONFIG_SUBSYSTEM_UBOOT_NAND_FIT_IMAGE_SIZE=0x6400000<br>CONFIG_SUBSYSTEM_UBOOT_KERNEL_IMAGE=<span class="hljs-string">&quot;Image&quot;</span><br>CONFIG_SUBSYSTEM_UBOOT_FIT_IMAGE=<span class="hljs-string">&quot;image.ub&quot;</span><br><span class="hljs-comment"># CONFIG_SUBSYSTEM_UBOOT_EXT_DTB is not set</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&#x27;V\8i+M\9B\9E\F0\00\00\E2\00\00\00\00\00\00\00\00\85w\9Cr\00Boot script\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\DA\00\00\00\00# This is a boot script for U-Boot</span><br><span class="hljs-string"># Generate boot.scr:</span><br><span class="hljs-string"># mkimage -c none -A arm -T script -d boot.cmd.default boot.scr</span><br><span class="hljs-string">#</span><br><span class="hljs-string">################</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">for boot_target in $&#123;boot_targets&#125;;</span><br><span class="hljs-string">do</span><br><span class="hljs-string">echo &quot;Trying to load boot images from $&#123;boot_target&#125;&quot;</span><br><span class="hljs-string">if test &quot;$&#123;boot_target&#125;&quot; = &quot;jtag&quot; ; then</span><br><span class="hljs-string">booti 0x00200000 0x04000000 0x00100000</span><br><span class="hljs-string">fi</span><br><span class="hljs-string">if test &quot;$&#123;boot_target&#125;&quot; = &quot;mmc0&quot; || test &quot;$&#123;boot_target&#125;&quot; = &quot;mmc1&quot; ; then</span><br><span class="hljs-string">if test -e $&#123;devtype&#125; $&#123;devnum&#125;:$&#123;distro_bootpart&#125; /uEnv.txt; then</span><br><span class="hljs-string">fatload $&#123;devtype&#125; $&#123;devnum&#125;:$&#123;distro_bootpart&#125; 0x00200000 uEnv.txt;</span><br><span class="hljs-string">echo &quot;Importing environment(uEnv.txt) from $&#123;boot_target&#125;...&quot;</span><br><span class="hljs-string">env import -t 0x00200000 $filesize</span><br><span class="hljs-string">if test -n $uenvcmd; then</span><br><span class="hljs-string">echo &quot;Running uenvcmd ...&quot;;</span><br><span class="hljs-string">run uenvcmd;</span><br><span class="hljs-string">fi</span><br><span class="hljs-string">fi</span><br><span class="hljs-string">if test -e $&#123;devtype&#125; $&#123;devnum&#125;:$&#123;distro_bootpart&#125; /image.ub; then</span><br><span class="hljs-string">fatload $&#123;devtype&#125; $&#123;devnum&#125;:$&#123;distro_bootpart&#125; 0x10000000 image.ub;</span><br><span class="hljs-string">bootm 0x10000000;</span><br><span class="hljs-string">                fi</span><br><span class="hljs-string">if test -e $&#123;devtype&#125; $&#123;devnum&#125;:$&#123;distro_bootpart&#125; /Image; then</span><br><span class="hljs-string">fatload $&#123;devtype&#125; $&#123;devnum&#125;:$&#123;distro_bootpart&#125; 0x00200000 Image;;</span><br><span class="hljs-string">fi</span><br><span class="hljs-string">if test -e $&#123;devtype&#125; $&#123;devnum&#125;:$&#123;distro_bootpart&#125; /system.dtb; then</span><br><span class="hljs-string">fatload $&#123;devtype&#125; $&#123;devnum&#125;:$&#123;distro_bootpart&#125; 0x00100000 system.dtb;</span><br><span class="hljs-string">fi</span><br><span class="hljs-string">if test -e $&#123;devtype&#125; $&#123;devnum&#125;:$&#123;distro_bootpart&#125; /ramdisk.cpio.gz.u-boot &amp;&amp; test &quot;$&#123;skip_tinyramdisk&#125;&quot; != &quot;yes&quot;; then</span><br><span class="hljs-string">fatload $&#123;devtype&#125; $&#123;devnum&#125;:$&#123;distro_bootpart&#125; 0x04000000 ramdisk.cpio.gz.u-boot;</span><br><span class="hljs-string">booti 0x00200000 0x04000000 0x00100000</span><br><span class="hljs-string">fi</span><br><span class="hljs-string">if test -e $&#123;devtype&#125; $&#123;devnum&#125;:$&#123;distro_bootpart&#125; /rootfs.cpio.gz.u-boot &amp;&amp; test &quot;$&#123;skip_ramdisk&#125;&quot; != &quot;yes&quot;; then</span><br><span class="hljs-string">fatload $&#123;devtype&#125; $&#123;devnum&#125;:$&#123;distro_bootpart&#125; 0x04000000 rootfs.cpio.gz.u-boot;</span><br><span class="hljs-string">booti 0x00200000 0x04000000 0x00100000</span><br><span class="hljs-string">fi</span><br><span class="hljs-string">booti 0x00200000 - 0x00100000</span><br><span class="hljs-string">fi</span><br><span class="hljs-string">if test &quot;$&#123;boot_target&#125;&quot; = &quot;xspi0&quot; || test &quot;$&#123;boot_target&#125;&quot; = &quot;qspi&quot; || test &quot;$&#123;boot_target&#125;&quot; = &quot;qspi0&quot;; then</span><br><span class="hljs-string">sf probe 0 0 0;</span><br><span class="hljs-string">sf read 0x10000000 0xF40000 0x6400000</span><br><span class="hljs-string">bootm 0x10000000;</span><br><span class="hljs-string">echo &quot;Booting using Fit image failed&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">sf read 0x00200000 0xF00000 0x1D00000</span><br><span class="hljs-string">sf read 0x04000000 0x4000000 0x4000000</span><br><span class="hljs-string">booti 0x00200000 0x04000000 0x00100000;</span><br><span class="hljs-string">echo &quot;Booting using Separate images failed&quot;</span><br><span class="hljs-string">fi</span><br><span class="hljs-string">if test &quot;$&#123;boot_target&#125;&quot; = &quot;nand&quot; || test &quot;$&#123;boot_target&#125;&quot; = &quot;nand0&quot;; then</span><br><span class="hljs-string">nand info;</span><br><span class="hljs-string">nand read 0x10000000 0x4180000 0x6400000</span><br><span class="hljs-string">bootm 0x10000000;</span><br><span class="hljs-string">echo &quot;Booting using Fit image failed&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">nand read 0x00200000 0x4100000 0x3200000</span><br><span class="hljs-string">nand read 0x04000000 0x7800000 0x3200000</span><br><span class="hljs-string">booti 0x00200000 0x04000000 0x00100000;</span><br><span class="hljs-string">echo &quot;Booting using Separate images failed&quot;</span><br><span class="hljs-string">fi</span><br><span class="hljs-string">done</span><br></code></pre></td></tr></table></figure><h2 id="petalinux-2022-2编译工程，显示bitbake版本不兼容-2"><a href="#petalinux-2022-2编译工程，显示bitbake版本不兼容-2" class="headerlink" title="petalinux 2022.2编译工程，显示bitbake版本不兼容[2]"></a>petalinux 2022.2编译工程，显示bitbake版本不兼容<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[PetaLinux Yocto Tips - Xilinx Wiki - Confluence (atlassian.net)](https://xilinx-wiki.atlassian.net/wiki/spaces/A/pages/18842475/PetaLinux+Yocto+Tips) Yocto相关使用">[2]</span></a></sup></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$PETALINUX</span>/components/yocto/buildtools/sysroots/x86_64-petalinux-linux/usr/bin/python3 ./components/yocto/layers/core/scripts/contrib/convert-overrides.py ./project-spec/meta-user/<br></code></pre></td></tr></table></figure><p>错误<sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Linux AXI Ethernet driver - Xilinx Wiki - Confluence (atlassian.net)](https://xilinx-wiki.atlassian.net/wiki/spaces/A/pages/18842485/Linux+AXI+Ethernet+driver) Xlinx-AXI-Ethernet-driver相关说明">[5]</span></a></sup></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[   52.763091] alloc_netdev: Unable to allocate device with zero queues<br>[   52.793075] xilinx_axienet: probe of a0010000.ethernet failed with error -12<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">25g-3-6$ petalinux-config --get-hw-description eth25g_wrapper.xsa<br>[INFO] Sourcing buildtools<br>INFO: Getting hardware description...<br>INFO: Renaming eth25g_wrapper.xsa to system.xsa<br>[INFO] Generating Kconfig <span class="hljs-keyword">for</span> project<br>ERROR: Failed to generate /home/pdc/00-petalinux-workspace/25g-3-6/build/misc/config/Kconfig.syshw<br>ERROR: Failed to Kconfig project<br>ERROR: Failed to generate System hardware Kconfig file.<br></code></pre></td></tr></table></figure><p>解决方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install libtinfo5<br></code></pre></td></tr></table></figure><h2 id="ERROR-x2F-dev"><a href="#ERROR-x2F-dev" class="headerlink" title="ERROR &#x2F;dev "></a>ERROR &#x2F;dev <a name="dev"/></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ERROR: There<span class="hljs-string">&#x27;s no &#x27;</span>/dev<span class="hljs-string">&#x27; on rootfs</span><br></code></pre></td></tr></table></figure><p><a href="https://support.xilinx.com/s/question/0D52E00006hprw1SAA/error-theres-no-dev-on-rootfs?language=en_US">ERROR: There’s no ‘&#x2F;dev’ on rootfs (xilinx.com)</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">petalinux-config -&gt; Image packaging configuration -&gt; INITRAMFS/INITRD Image name -&gt; petalinux-image-minimal<br></code></pre></td></tr></table></figure><h2 id="指定源码路径"><a href="#指定源码路径" class="headerlink" title="指定源码路径"></a>指定源码路径</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> substitute-path &lt;当前搜索路径&gt; &lt;指的搜索路径&gt;<br><span class="hljs-built_in">set</span> substitute-path /usr/src/kernel /opt/linux-xlnx-xilinx-v2021.1<br></code></pre></td></tr></table></figure><h2 id="打包BOOT-BIN出现Section-image-ub-0-offset-of-0x242C0-overlaps-with-prior-section-end-address-of-242C0C0"><a href="#打包BOOT-BIN出现Section-image-ub-0-offset-of-0x242C0-overlaps-with-prior-section-end-address-of-242C0C0" class="headerlink" title="打包BOOT.BIN出现Section image.ub.0 offset of 0x242C0 overlaps with prior section end address of 242C0C0"></a>打包<code>BOOT.BIN</code>出现<code>Section image.ub.0 offset of 0x242C0 overlaps with prior section end address of 242C0C0</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">***** Xilinx Bootgen v2021.1<br>  **** Build <span class="hljs-built_in">date</span> : May 28 2021-21:36:22<br>    ** Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.<br><br>[ERROR]  : Section image.ub.0 offset of 0x242C0 overlaps with prior section end address of 242C0C0<br>ERROR: Fail to create BOOT image<br></code></pre></td></tr></table></figure><p>指定<code>kernel</code>的<code>offset</code>地址:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">petalinux-package --boot --format BIN --kernel --offset 0x0242d000 --fsbl --u-boot --pmufw --fpga ./images/linux/design_1_wrapper.bit --force<br></code></pre></td></tr></table></figure><h2 id="qspi启动后无法自动跳转至kernel"><a href="#qspi启动后无法自动跳转至kernel" class="headerlink" title="qspi启动后无法自动跳转至kernel"></a><code>qspi</code>启动后无法自动跳转至<code>kernel</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#flash读取至ddr    目的地址   kernel源地址   长度</span><br><span class="hljs-variable">$zynqMP</span>:sf <span class="hljs-built_in">read</span> 0x80000000 0x0242d000 0x2800000<br><br><span class="hljs-variable">$zynqMP</span>:booti 0x80000000<br></code></pre></td></tr></table></figure><h2 id="fit-image"><a href="#fit-image" class="headerlink" title="fit image"></a>fit image</h2><p><img src="/image/petalinux/image-20230516202406387.png" alt="image-20230516202406387"></p><p>在 Petalinux 配置中，QSPI&#x2F;OSPI FIT 映像是指在 QSPI&#x2F;OSPI NOR Flash 上存储的 FIT 映像。FIT 映像是一种灵活的引导映像格式，可以包含多个镜像文件（如内核、设备树、文件系统等），并且可以根据需要进行配置。</p><p>根据上述文件在uboot阶段可以使用以下代码启动<code>kernel</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$zynqMP</span>:sf <span class="hljs-built_in">read</span> 0x10000000 0xF40000 0x6400000<br><span class="hljs-variable">$zynqMP</span>:bootm 0x10000000<br></code></pre></td></tr></table></figure><h1 id="如何修改设备树-3"><a href="#如何修改设备树-3" class="headerlink" title="如何修改设备树[3]"></a>如何修改设备树<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Xilinx Petalinux工程设备树介绍](https://support.xilinx.com/s/article/1197597?language=zh_CN)">[3]</span></a></sup></h1><h2 id="基于自动生成的设备树，添加或修改节点"><a href="#基于自动生成的设备树，添加或修改节点" class="headerlink" title="基于自动生成的设备树，添加或修改节点"></a>基于自动生成的设备树，添加或修改节点</h2><p>通过修改<code>./project-spec/meta-user/recipes-bsp/device-tree/files/system-user.dtsi</code>，来实现对之前已经定义的设备树节点中的属性进行变更，也可以添加没有自动生成的设备树节点。</p><p>设备树语法可参考 《devicetree-specification.pdf》<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Releases · devicetree-org/devicetree-specification (github.com)](https://github.com/devicetree-org/devicetree-specification/releases?page=2)">[4]</span></a></sup></p><p>设备树更改完成后需要执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">petalinux-build -c device-tree -x cleansstate<br>生成pl.dtsi<br>petalinux-config -c device-tree<br>petalinux-build -c device-tree<br></code></pre></td></tr></table></figure><h2 id="设备树反编译"><a href="#设备树反编译" class="headerlink" title="设备树反编译"></a>设备树反编译</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> &lt;plnx-proj-root&gt;/images/linux/<br>../../build/tmp/sysroots-components/x86_64/dtc-native/usr/bin/dtc -I dtb -O dts -o system.dts system.dtb<br></code></pre></td></tr></table></figure><h1 id="手册"><a href="#手册" class="headerlink" title="手册"></a>手册</h1><p>PG332 ERNIC 手册</p><p>PG203 CMAC 手册</p><p>PG210 25G AXI Ethernet 手册</p><p>PG021 AXI-DMA手册</p><p>PG288 MCDMA手册</p><p>UG1085-Zynq-Ultrascale-trm 手册 250 SoC芯片手册</p><p><a href="https://www.xilinx.com/htmldocs/registers/ug1087/ug1087-zynq-ultrascale-registers.html">Zynq UltraScale+ Devices Register Reference (xilinx.com)</a> ug1085-Zynq-Ultrascale寄存器手册</p><p>UG1144 Petalinux Tools手册</p><p>错误</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">RROR: perftest-1.0-r0 do_compile: oe_runmake failed<br>ERROR: perftest-1.0-r0 do_compile: Execution of <span class="hljs-string">&#x27;/home/dpu/zjzhe/250soc_ernic/build/tmp/work/cortexa72-cortexa53-xilinx-linux/perftest/1.0-r0/temp/run.do_compile.180753&#x27;</span> failed with <span class="hljs-built_in">exit</span> code 1:<br>make  all-am<br>make[1]: Entering directory <span class="hljs-string">&#x27;/home/dpu/zjzhe/250soc_ernic/build/tmp/work/cortexa72-cortexa53-xilinx-linux/perftest/1.0-r0/git&#x27;</span><br>make[1]: *** No rule to make target <span class="hljs-string">&#x27;../../../umm/1.0-r0/libumm.so&#x27;</span>, needed by <span class="hljs-string">&#x27;libperftest.a&#x27;</span>.  Stop.<br><br></code></pre></td></tr></table></figure><p>解决方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">dpu@dpu-PC:~/zjzhe/250soc_ernic/build/tmp/work/cortexa72-cortexa53-xilinx-linux/perftest/1.0-r0/git$ find ..// -name <span class="hljs-string">&quot;libumm*&quot;</span><br>..//recipe-sysroot/usr/lib/libumm.so.1.0<br>..//recipe-sysroot/usr/lib/libumm.so.1<br>..//recipe-sysroot/usr/lib/libumm.so<br>dpu@dpu-PC:~/zjzhe/250soc_ernic/build/tmp/work/cortexa72-cortexa53-xilinx-linux/perftest/1.0-r0$ <span class="hljs-built_in">ln</span> -s ./recipe-sysroot/usr/lib/libumm.so ../../umm/1.0-r0/libumm.so<br><br></code></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.zynqnotes.com/pl-ps-interrupt">中断（一）：让 Linux 接收来自 PL 的自定义中断信号 (zynqnotes.com)</a> zynqMP PL2PS、PS2PL设备树中断配置</p><p><a href="https://docs.xilinx.com/">主页 • 文档门户 (xilinx.com)</a> Xlinx 文档下载</p><p><a href="https://github.com/Xilinx/u-boot-xlnx">Xilinx&#x2F;u-boot-xlnx: The official Xilinx u-boot repository (github.com)</a> xlinx维护的uboot</p><p><a href="https://github.com/Xilinx/linux-xlnx">Xilinx&#x2F;linux-xlnx: The official Linux kernel from Xilinx (github.com)</a> xlinx维护的linux</p><p><a href="https://zhuanlan.zhihu.com/p/478422063">Petalinux2020.2 开发ZYNQ的AXI DMA - 知乎 (zhihu.com)</a> petalinux创建modules</p><p><a href="https://www.cnblogs.com/schips/p/xilinx-petalinux-common-commands.html">PetaLinux常用命令汇总 - schips - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/u011529140/article/details/70800460"> petalinux-package qspi启动镜像的问题_uimage_offset_边城1987的博客-CSDN博客</a></p><p><a href="https://support.xilinx.com/s/question/0D52E00006hpeRTSAY/petalinuxpackage-boot-add-offset-doesnt-work-as-before?language=en_US">petalinux-package –boot –add –offset doesn’t work as before (xilinx.com)</a></p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://wiki.trenz-electronic.de/display/PD/PetaLinux">PetaLinux - Public Docs - Trenz Electronic Wiki (trenz-electronic.de)</a> petalinux工程创建等使用<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://xilinx-wiki.atlassian.net/wiki/spaces/A/pages/18842475/PetaLinux+Yocto+Tips">PetaLinux Yocto Tips - Xilinx Wiki - Confluence (atlassian.net)</a> Yocto相关使用<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://support.xilinx.com/s/article/1197597?language=zh_CN">Xilinx Petalinux工程设备树介绍</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://github.com/devicetree-org/devicetree-specification/releases?page=2">Releases · devicetree-org&#x2F;devicetree-specification (github.com)</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://xilinx-wiki.atlassian.net/wiki/spaces/A/pages/18842485/Linux+AXI+Ethernet+driver">Linux AXI Ethernet driver - Xilinx Wiki - Confluence (atlassian.net)</a> Xlinx-AXI-Ethernet-driver相关说明<a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span><a href="https://blog.csdn.net/baidu_37503452/article/details/80106440">petalinux调试内核_StarLish0715的博客-CSDN博客</a><a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>petalinux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式基础</title>
    <link href="/2023/06/12/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/06/12/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p><strong>正则表达式</strong>是一种用于匹配和操作文本的强大工具，它是由一系列字符和特殊字符组成的模式，用于描述要匹配的文本模式。</p><p>正则表达式可以在文本中查找、替换、提取和验证特定的模式。</p><h3 id="命令行展开"><a href="#命令行展开" class="headerlink" title="命令行展开"></a>命令行展开</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">eddy@DESKTOP-KTLF3P4:~$ <span class="hljs-built_in">echo</span> <span class="hljs-built_in">ls</span>&#123;0..20&#125;<br>ls0 ls1 ls2 ls3 ls4 ls5 ls6 ls7 ls8 ls9 ls10 ls11 ls12 ls13 ls14 ls15 ls16 ls17 ls18 ls19 ls20<br>eddy@DESKTOP-KTLF3P4:~$ <span class="hljs-built_in">echo</span> <span class="hljs-built_in">pwd</span>&#123;1..20..2&#125;<br>pwd1 pwd3 pwd5 pwd7 pwd9 pwd11 pwd13 pwd15 pwd17 pwd19<br>eddy@DESKTOP-KTLF3P4:~$ <span class="hljs-built_in">echo</span> <span class="hljs-built_in">pwd</span>&#123;01..20..2&#125;<br>pwd01 pwd03 pwd05 pwd07 pwd09 pwd11 pwd13 pwd15 pwd17 pwd19<br>eddy@DESKTOP-KTLF3P4:~$<br></code></pre></td></tr></table></figure><h3 id="命令别名"><a href="#命令别名" class="headerlink" title="命令别名"></a>命令别名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">alias</span>, <span class="hljs-built_in">unalias</span><br>eddy@DESKTOP-KTLF3P4:~$ <span class="hljs-built_in">alias</span> <span class="hljs-built_in">rm</span>=<span class="hljs-string">&#x27;rm -i&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="命令历史"><a href="#命令历史" class="headerlink" title="命令历史"></a>命令历史</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">history</span><br>!&lt;行号&gt;  <span class="hljs-comment">#执行history中第&lt;&gt;条命令</span><br>!! <span class="hljs-comment">#执行上次命令</span><br></code></pre></td></tr></table></figure><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">ctrl + a<span class="hljs-comment">#移动到命令行首</span><br>ctrl + e<span class="hljs-comment">#移动到命令行尾</span><br>ctrl + k<span class="hljs-comment">#删除光标后的字符</span><br>ctrl + u<span class="hljs-comment">#删除光标前的内容</span><br></code></pre></td></tr></table></figure><h3 id="查询命令位置"><a href="#查询命令位置" class="headerlink" title="查询命令位置"></a>查询命令位置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">which</span> <span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><h1 id="Linux正则表达式（Regular-Expression，REGEXP）"><a href="#Linux正则表达式（Regular-Expression，REGEXP）" class="headerlink" title="Linux正则表达式（Regular Expression，REGEXP）"></a>Linux正则表达式（Regular Expression，REGEXP）</h1><ul><li>grep：文本过滤工具，（模式：pattern）</li><li>sed：stream editor，流编辑器；文本编辑器</li><li>awk：Linux的文本报告生成器（格式化文本），Linux中是gawk</li></ul><h2 id="正则表达式的分类"><a href="#正则表达式的分类" class="headerlink" title="正则表达式的分类"></a>正则表达式的分类</h2><ul><li>基本正则表达式（BRE，basic regular exporession）</li></ul><blockquote><p>BRE对应的字符有 ^ $ . [] *</p></blockquote><ul><li>扩展正则表达式（ERE，extended regular expression）</li></ul><blockquote><p>ERE在BRE的基础上增加 () {} ? + | 等字符</p></blockquote><h3 id="基本正则表达式BRE集合"><a href="#基本正则表达式BRE集合" class="headerlink" title="基本正则表达式BRE集合"></a>基本正则表达式BRE集合</h3><ul><li>匹配字符</li><li>匹配次数</li><li>位置锚定</li></ul><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>^</td><td>尖角号，用于模式的最左侧，如”^oldboy”，匹配oldboy单词开头的行</td></tr><tr><td>$</td><td>美元符，用于模式的最右侧，如”oldboy$”，表示以oldboy单词结尾的行</td></tr><tr><td>^$</td><td>组合符，表示空行</td></tr><tr><td>.</td><td>匹配任意一个有且只有一个字符，不能匹配空行</td></tr><tr><td>\</td><td>转义字符，让特殊含义的字符还原本意，例如<code>\.</code>表示小数点</td></tr><tr><td>*</td><td>匹配前一个字符（连续出现）0次或1次以上，重复0次代表空，即匹配所有内容</td></tr><tr><td>.*</td><td>组合符，匹配所有内容</td></tr><tr><td>^.*</td><td>组合符，匹配任意多个字符开头的内容</td></tr><tr><td>.*$</td><td>组合符，匹配任意多个字符结尾的内容</td></tr><tr><td>[abc]</td><td>匹配[]内的任意一个字符，a或b或c，可以写为[a-c]</td></tr><tr><td>[^abc]</td><td>匹配除了^后面的任意字符，a或b或c，^表示对[abc]的取反</td></tr></tbody></table><h3 id="扩展正则表达式ERE集合"><a href="#扩展正则表达式ERE集合" class="headerlink" title="扩展正则表达式ERE集合"></a>扩展正则表达式ERE集合</h3><p>扩展正则表达式必须用<code>grep -E</code>才能生效</p><table><thead><tr><th>字符</th><th>作用</th></tr></thead><tbody><tr><td>+</td><td>匹配前一个字符一次或多次</td></tr><tr><td>[:&#x2F;]+</td><td>匹配<code>[]</code>内的”:”或者”&#x2F;“字符一次或多次</td></tr><tr><td>?</td><td>匹配前一个字符0次或一次</td></tr><tr><td>|</td><td>表示<code>或</code>，同时过滤多个字符串</td></tr><tr><td>()</td><td>分组过滤，被括起来的内容表示一个整体</td></tr><tr><td>a{n,m}</td><td>匹配前一个字符最少<code>n</code>次，最多<code>m</code>次</td></tr><tr><td>a{n,}</td><td>匹配前一个字符最少n次</td></tr><tr><td>a{n}</td><td>匹配前一个字符正好n次</td></tr><tr><td>a{,m}</td><td>匹配前一个字符最多m次</td></tr></tbody></table><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://tool.oschina.net/uploads/apidocs/jquery/regexp.html">表达式全集</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>正则表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/05/31/hello-world/"/>
    <url>/2023/05/31/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
